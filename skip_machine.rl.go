// Code generated by script/generate-ragel-file skip_machine.rl. DO NOT EDIT.

package rjson

func skipValueFast(data []byte, stack []int) (int, []int, error) {
	var top int
	cs, p := 0, 0
	pe := len(data)
	eof := len(data)
	var err error

	const skipValueFast_start int = 1
	const skipValueFast_first_final int = 58
	const skipValueFast_error int = 0

	const skipValueFast_en_skip_array_fast int = 26
	const skipValueFast_en_skip_object_fast int = 42
	const skipValueFast_en_main int = 1

	{
		cs = skipValueFast_start
		top = 0
	}

	{
		if p == pe {
			goto _test_eof
		}
		goto _resume

	_again:
		switch cs {
		case 1:
			goto st1
		case 0:
			goto st0
		case 2:
			goto st2
		case 3:
			goto st3
		case 4:
			goto st4
		case 58:
			goto st58
		case 5:
			goto st5
		case 6:
			goto st6
		case 7:
			goto st7
		case 8:
			goto st8
		case 9:
			goto st9
		case 10:
			goto st10
		case 11:
			goto st11
		case 12:
			goto st12
		case 59:
			goto st59
		case 13:
			goto st13
		case 60:
			goto st60
		case 61:
			goto st61
		case 14:
			goto st14
		case 15:
			goto st15
		case 62:
			goto st62
		case 63:
			goto st63
		case 64:
			goto st64
		case 65:
			goto st65
		case 66:
			goto st66
		case 16:
			goto st16
		case 17:
			goto st17
		case 18:
			goto st18
		case 19:
			goto st19
		case 67:
			goto st67
		case 20:
			goto st20
		case 21:
			goto st21
		case 22:
			goto st22
		case 68:
			goto st68
		case 23:
			goto st23
		case 24:
			goto st24
		case 25:
			goto st25
		case 69:
			goto st69
		case 70:
			goto st70
		case 26:
			goto st26
		case 27:
			goto st27
		case 28:
			goto st28
		case 29:
			goto st29
		case 30:
			goto st30
		case 31:
			goto st31
		case 32:
			goto st32
		case 33:
			goto st33
		case 34:
			goto st34
		case 71:
			goto st71
		case 35:
			goto st35
		case 36:
			goto st36
		case 37:
			goto st37
		case 38:
			goto st38
		case 39:
			goto st39
		case 40:
			goto st40
		case 41:
			goto st41
		case 42:
			goto st42
		case 43:
			goto st43
		case 44:
			goto st44
		case 45:
			goto st45
		case 46:
			goto st46
		case 47:
			goto st47
		case 48:
			goto st48
		case 49:
			goto st49
		case 50:
			goto st50
		case 72:
			goto st72
		case 51:
			goto st51
		case 52:
			goto st52
		case 53:
			goto st53
		case 54:
			goto st54
		case 55:
			goto st55
		case 56:
			goto st56
		case 57:
			goto st57
		}

		if p++; p == pe {
			goto _test_eof
		}
	_resume:
		switch cs {
		case 1:
			goto st_case_1
		case 0:
			goto st_case_0
		case 2:
			goto st_case_2
		case 3:
			goto st_case_3
		case 4:
			goto st_case_4
		case 58:
			goto st_case_58
		case 5:
			goto st_case_5
		case 6:
			goto st_case_6
		case 7:
			goto st_case_7
		case 8:
			goto st_case_8
		case 9:
			goto st_case_9
		case 10:
			goto st_case_10
		case 11:
			goto st_case_11
		case 12:
			goto st_case_12
		case 59:
			goto st_case_59
		case 13:
			goto st_case_13
		case 60:
			goto st_case_60
		case 61:
			goto st_case_61
		case 14:
			goto st_case_14
		case 15:
			goto st_case_15
		case 62:
			goto st_case_62
		case 63:
			goto st_case_63
		case 64:
			goto st_case_64
		case 65:
			goto st_case_65
		case 66:
			goto st_case_66
		case 16:
			goto st_case_16
		case 17:
			goto st_case_17
		case 18:
			goto st_case_18
		case 19:
			goto st_case_19
		case 67:
			goto st_case_67
		case 20:
			goto st_case_20
		case 21:
			goto st_case_21
		case 22:
			goto st_case_22
		case 68:
			goto st_case_68
		case 23:
			goto st_case_23
		case 24:
			goto st_case_24
		case 25:
			goto st_case_25
		case 69:
			goto st_case_69
		case 70:
			goto st_case_70
		case 26:
			goto st_case_26
		case 27:
			goto st_case_27
		case 28:
			goto st_case_28
		case 29:
			goto st_case_29
		case 30:
			goto st_case_30
		case 31:
			goto st_case_31
		case 32:
			goto st_case_32
		case 33:
			goto st_case_33
		case 34:
			goto st_case_34
		case 71:
			goto st_case_71
		case 35:
			goto st_case_35
		case 36:
			goto st_case_36
		case 37:
			goto st_case_37
		case 38:
			goto st_case_38
		case 39:
			goto st_case_39
		case 40:
			goto st_case_40
		case 41:
			goto st_case_41
		case 42:
			goto st_case_42
		case 43:
			goto st_case_43
		case 44:
			goto st_case_44
		case 45:
			goto st_case_45
		case 46:
			goto st_case_46
		case 47:
			goto st_case_47
		case 48:
			goto st_case_48
		case 49:
			goto st_case_49
		case 50:
			goto st_case_50
		case 72:
			goto st_case_72
		case 51:
			goto st_case_51
		case 52:
			goto st_case_52
		case 53:
			goto st_case_53
		case 54:
			goto st_case_54
		case 55:
			goto st_case_55
		case 56:
			goto st_case_56
		case 57:
			goto st_case_57
		}
		goto st_out
	st1:
		if p++; p == pe {
			goto _test_eof1
		}
	st_case_1:
		switch data[p] {
		case 13:
			goto st2
		case 32:
			goto st2
		case 34:
			goto st3
		case 45:
			goto st12
		case 48:
			goto st59
		case 91:
			goto tr6
		case 102:
			goto st16
		case 110:
			goto st20
		case 116:
			goto st23
		case 123:
			goto tr10
		}
		switch {
		case data[p] > 10:
			if 49 <= data[p] && data[p] <= 57 {
				goto st64
			}
		case data[p] >= 9:
			goto st2
		}
		goto tr0
	tr0:

		return p, stack, errNoValidToken

		goto st0
	tr38:
		err = errInvalidArray
		{
			p++
			cs = 0
			goto _out
		}
		goto st0
	tr55:
		err = errInvalidObject
		{
			p++
			cs = 0
			goto _out
		}
		goto st0
	st_case_0:
	st0:
		cs = 0
		goto _out
	st2:
		if p++; p == pe {
			goto _test_eof2
		}
	st_case_2:
		switch data[p] {
		case 13:
			goto st2
		case 32:
			goto st2
		case 34:
			goto st3
		case 45:
			goto st12
		case 48:
			goto st59
		case 91:
			goto tr6
		case 102:
			goto st16
		case 110:
			goto st20
		case 116:
			goto st23
		case 123:
			goto tr10
		}
		switch {
		case data[p] > 10:
			if 49 <= data[p] && data[p] <= 57 {
				goto st64
			}
		case data[p] >= 9:
			goto st2
		}
		goto tr0
	st3:
		if p++; p == pe {
			goto _test_eof3
		}
	st_case_3:
		switch data[p] {
		case 34:
			goto st58
		case 92:
			goto st5
		}
		if data[p] <= 31 {
			goto tr0
		}
		goto st4
	st4:
		if p++; p == pe {
			goto _test_eof4
		}
	st_case_4:
		switch data[p] {
		case 34:
			goto st58
		case 92:
			goto st5
		}
		if data[p] <= 31 {
			goto tr0
		}
		goto st4
	st58:
		if p++; p == pe {
			goto _test_eof58
		}
	st_case_58:
		goto st0
	st5:
		if p++; p == pe {
			goto _test_eof5
		}
	st_case_5:
		switch data[p] {
		case 34:
			goto st6
		case 47:
			goto st6
		case 92:
			goto st6
		case 98:
			goto st6
		case 102:
			goto st6
		case 110:
			goto st6
		case 114:
			goto st6
		case 116:
			goto st6
		case 117:
			goto st7
		}
		goto tr0
	st6:
		if p++; p == pe {
			goto _test_eof6
		}
	st_case_6:
		switch data[p] {
		case 34:
			goto st58
		case 92:
			goto st5
		}
		if data[p] <= 31 {
			goto tr0
		}
		goto st4
	st7:
		if p++; p == pe {
			goto _test_eof7
		}
	st_case_7:
		switch {
		case data[p] < 65:
			if 48 <= data[p] && data[p] <= 57 {
				goto st8
			}
		case data[p] > 70:
			if 97 <= data[p] && data[p] <= 102 {
				goto st8
			}
		default:
			goto st8
		}
		goto tr0
	st8:
		if p++; p == pe {
			goto _test_eof8
		}
	st_case_8:
		switch {
		case data[p] < 65:
			if 48 <= data[p] && data[p] <= 57 {
				goto st9
			}
		case data[p] > 70:
			if 97 <= data[p] && data[p] <= 102 {
				goto st9
			}
		default:
			goto st9
		}
		goto tr0
	st9:
		if p++; p == pe {
			goto _test_eof9
		}
	st_case_9:
		switch {
		case data[p] < 65:
			if 48 <= data[p] && data[p] <= 57 {
				goto st10
			}
		case data[p] > 70:
			if 97 <= data[p] && data[p] <= 102 {
				goto st10
			}
		default:
			goto st10
		}
		goto tr0
	st10:
		if p++; p == pe {
			goto _test_eof10
		}
	st_case_10:
		switch {
		case data[p] < 65:
			if 48 <= data[p] && data[p] <= 57 {
				goto st11
			}
		case data[p] > 70:
			if 97 <= data[p] && data[p] <= 102 {
				goto st11
			}
		default:
			goto st11
		}
		goto tr0
	st11:
		if p++; p == pe {
			goto _test_eof11
		}
	st_case_11:
		switch data[p] {
		case 34:
			goto st58
		case 92:
			goto st5
		}
		if data[p] <= 31 {
			goto tr0
		}
		goto st4
	st12:
		if p++; p == pe {
			goto _test_eof12
		}
	st_case_12:
		if data[p] == 48 {
			goto st59
		}
		if 49 <= data[p] && data[p] <= 57 {
			goto st64
		}
		goto tr0
	st59:
		if p++; p == pe {
			goto _test_eof59
		}
	st_case_59:
		switch data[p] {
		case 46:
			goto st13
		case 69:
			goto st14
		case 101:
			goto st14
		}
		goto st0
	st13:
		if p++; p == pe {
			goto _test_eof13
		}
	st_case_13:
		if 48 <= data[p] && data[p] <= 57 {
			goto st60
		}
		goto tr0
	st60:
		if p++; p == pe {
			goto _test_eof60
		}
	st_case_60:
		switch data[p] {
		case 69:
			goto st14
		case 101:
			goto st14
		}
		if 48 <= data[p] && data[p] <= 57 {
			goto st61
		}
		goto st0
	st61:
		if p++; p == pe {
			goto _test_eof61
		}
	st_case_61:
		switch data[p] {
		case 69:
			goto st14
		case 101:
			goto st14
		}
		if 48 <= data[p] && data[p] <= 57 {
			goto st61
		}
		goto st0
	st14:
		if p++; p == pe {
			goto _test_eof14
		}
	st_case_14:
		switch data[p] {
		case 43:
			goto st15
		case 45:
			goto st15
		}
		if 48 <= data[p] && data[p] <= 57 {
			goto st62
		}
		goto tr0
	st15:
		if p++; p == pe {
			goto _test_eof15
		}
	st_case_15:
		if 48 <= data[p] && data[p] <= 57 {
			goto st62
		}
		goto tr0
	st62:
		if p++; p == pe {
			goto _test_eof62
		}
	st_case_62:
		if 48 <= data[p] && data[p] <= 57 {
			goto st63
		}
		goto st0
	st63:
		if p++; p == pe {
			goto _test_eof63
		}
	st_case_63:
		if 48 <= data[p] && data[p] <= 57 {
			goto st63
		}
		goto st0
	st64:
		if p++; p == pe {
			goto _test_eof64
		}
	st_case_64:
		switch data[p] {
		case 46:
			goto st13
		case 69:
			goto st14
		case 101:
			goto st14
		}
		if 48 <= data[p] && data[p] <= 57 {
			goto st65
		}
		goto st0
	st65:
		if p++; p == pe {
			goto _test_eof65
		}
	st_case_65:
		switch data[p] {
		case 46:
			goto st13
		case 69:
			goto st14
		case 101:
			goto st14
		}
		if 48 <= data[p] && data[p] <= 57 {
			goto st65
		}
		goto st0
	tr6:
		{
			if top == skipMaxDepth {
				err = errMaxDepth
				{
					p++
					cs = 0
					goto _out
				}
			}
			if top+1 >= len(stack) {
				stack = append(stack, make([]int, 1+top-len(stack))...)
			}
			{
				stack[top] = 66
				top++
				goto st26
			}
		}
		goto st66
	st66:
		if p++; p == pe {
			goto _test_eof66
		}
	st_case_66:
		goto st0
	st16:
		if p++; p == pe {
			goto _test_eof16
		}
	st_case_16:
		if data[p] == 97 {
			goto st17
		}
		goto tr0
	st17:
		if p++; p == pe {
			goto _test_eof17
		}
	st_case_17:
		if data[p] == 108 {
			goto st18
		}
		goto tr0
	st18:
		if p++; p == pe {
			goto _test_eof18
		}
	st_case_18:
		if data[p] == 115 {
			goto st19
		}
		goto tr0
	st19:
		if p++; p == pe {
			goto _test_eof19
		}
	st_case_19:
		if data[p] == 101 {
			goto st67
		}
		goto tr0
	st67:
		if p++; p == pe {
			goto _test_eof67
		}
	st_case_67:
		goto st0
	st20:
		if p++; p == pe {
			goto _test_eof20
		}
	st_case_20:
		if data[p] == 117 {
			goto st21
		}
		goto tr0
	st21:
		if p++; p == pe {
			goto _test_eof21
		}
	st_case_21:
		if data[p] == 108 {
			goto st22
		}
		goto tr0
	st22:
		if p++; p == pe {
			goto _test_eof22
		}
	st_case_22:
		if data[p] == 108 {
			goto st68
		}
		goto tr0
	st68:
		if p++; p == pe {
			goto _test_eof68
		}
	st_case_68:
		goto st0
	st23:
		if p++; p == pe {
			goto _test_eof23
		}
	st_case_23:
		if data[p] == 114 {
			goto st24
		}
		goto tr0
	st24:
		if p++; p == pe {
			goto _test_eof24
		}
	st_case_24:
		if data[p] == 117 {
			goto st25
		}
		goto tr0
	st25:
		if p++; p == pe {
			goto _test_eof25
		}
	st_case_25:
		if data[p] == 101 {
			goto st69
		}
		goto tr0
	st69:
		if p++; p == pe {
			goto _test_eof69
		}
	st_case_69:
		goto st0
	tr10:
		{
			if top == skipMaxDepth {
				err = errMaxDepth
				{
					p++
					cs = 0
					goto _out
				}
			}
			if top+1 >= len(stack) {
				stack = append(stack, make([]int, 1+top-len(stack))...)
			}
			{
				stack[top] = 70
				top++
				goto st42
			}
		}
		goto st70
	st70:
		if p++; p == pe {
			goto _test_eof70
		}
	st_case_70:
		goto st0
	st26:
		if p++; p == pe {
			goto _test_eof26
		}
	st_case_26:
		switch data[p] {
		case 34:
			goto st29
		case 91:
			goto tr35
		case 93:
			goto tr36
		}
		goto st27
	st27:
		if p++; p == pe {
			goto _test_eof27
		}
	st_case_27:
		switch data[p] {
		case 34:
			goto st29
		case 91:
			goto tr35
		case 93:
			goto tr36
		}
		goto st28
	st28:
		if p++; p == pe {
			goto _test_eof28
		}
	st_case_28:
		switch data[p] {
		case 34:
			goto st29
		case 91:
			goto tr35
		case 93:
			goto tr36
		}
		goto st28
	st29:
		if p++; p == pe {
			goto _test_eof29
		}
	st_case_29:
		switch data[p] {
		case 34:
			goto st31
		case 92:
			goto st35
		}
		if data[p] <= 31 {
			goto tr38
		}
		goto st30
	st30:
		if p++; p == pe {
			goto _test_eof30
		}
	st_case_30:
		switch data[p] {
		case 34:
			goto st31
		case 92:
			goto st35
		}
		if data[p] <= 31 {
			goto tr38
		}
		goto st30
	st31:
		if p++; p == pe {
			goto _test_eof31
		}
	st_case_31:
		switch data[p] {
		case 34:
			goto st29
		case 91:
			goto tr35
		case 93:
			goto tr36
		}
		goto st32
	st32:
		if p++; p == pe {
			goto _test_eof32
		}
	st_case_32:
		switch data[p] {
		case 34:
			goto st29
		case 91:
			goto tr35
		case 93:
			goto tr36
		}
		goto st33
	st33:
		if p++; p == pe {
			goto _test_eof33
		}
	st_case_33:
		switch data[p] {
		case 34:
			goto st29
		case 91:
			goto tr35
		case 93:
			goto tr36
		}
		goto st33
	tr35:
		{
			if top == skipMaxDepth {
				err = errMaxDepth
				{
					p++
					cs = 0
					goto _out
				}
			}
			if top+1 >= len(stack) {
				stack = append(stack, make([]int, 1+top-len(stack))...)
			}
			{
				stack[top] = 34
				top++
				goto st26
			}
		}
		goto st34
	st34:
		if p++; p == pe {
			goto _test_eof34
		}
	st_case_34:
		switch data[p] {
		case 34:
			goto st29
		case 91:
			goto tr35
		case 93:
			goto tr36
		}
		goto st32
	tr36:
		{
			top--
			cs = stack[top]
			goto _again
		}
		goto st71
	st71:
		if p++; p == pe {
			goto _test_eof71
		}
	st_case_71:
		goto st0
	st35:
		if p++; p == pe {
			goto _test_eof35
		}
	st_case_35:
		switch data[p] {
		case 34:
			goto st36
		case 47:
			goto st36
		case 92:
			goto st36
		case 98:
			goto st36
		case 102:
			goto st36
		case 110:
			goto st36
		case 114:
			goto st36
		case 116:
			goto st36
		case 117:
			goto st37
		}
		goto tr38
	st36:
		if p++; p == pe {
			goto _test_eof36
		}
	st_case_36:
		switch data[p] {
		case 34:
			goto st31
		case 92:
			goto st35
		}
		if data[p] <= 31 {
			goto tr38
		}
		goto st30
	st37:
		if p++; p == pe {
			goto _test_eof37
		}
	st_case_37:
		switch {
		case data[p] < 65:
			if 48 <= data[p] && data[p] <= 57 {
				goto st38
			}
		case data[p] > 70:
			if 97 <= data[p] && data[p] <= 102 {
				goto st38
			}
		default:
			goto st38
		}
		goto tr38
	st38:
		if p++; p == pe {
			goto _test_eof38
		}
	st_case_38:
		switch {
		case data[p] < 65:
			if 48 <= data[p] && data[p] <= 57 {
				goto st39
			}
		case data[p] > 70:
			if 97 <= data[p] && data[p] <= 102 {
				goto st39
			}
		default:
			goto st39
		}
		goto tr38
	st39:
		if p++; p == pe {
			goto _test_eof39
		}
	st_case_39:
		switch {
		case data[p] < 65:
			if 48 <= data[p] && data[p] <= 57 {
				goto st40
			}
		case data[p] > 70:
			if 97 <= data[p] && data[p] <= 102 {
				goto st40
			}
		default:
			goto st40
		}
		goto tr38
	st40:
		if p++; p == pe {
			goto _test_eof40
		}
	st_case_40:
		switch {
		case data[p] < 65:
			if 48 <= data[p] && data[p] <= 57 {
				goto st41
			}
		case data[p] > 70:
			if 97 <= data[p] && data[p] <= 102 {
				goto st41
			}
		default:
			goto st41
		}
		goto tr38
	st41:
		if p++; p == pe {
			goto _test_eof41
		}
	st_case_41:
		switch data[p] {
		case 34:
			goto st31
		case 92:
			goto st35
		}
		if data[p] <= 31 {
			goto tr38
		}
		goto st30
	st42:
		if p++; p == pe {
			goto _test_eof42
		}
	st_case_42:
		switch data[p] {
		case 34:
			goto st45
		case 123:
			goto tr52
		case 125:
			goto tr53
		}
		goto st43
	st43:
		if p++; p == pe {
			goto _test_eof43
		}
	st_case_43:
		switch data[p] {
		case 34:
			goto st45
		case 123:
			goto tr52
		case 125:
			goto tr53
		}
		goto st44
	st44:
		if p++; p == pe {
			goto _test_eof44
		}
	st_case_44:
		switch data[p] {
		case 34:
			goto st45
		case 123:
			goto tr52
		case 125:
			goto tr53
		}
		goto st44
	st45:
		if p++; p == pe {
			goto _test_eof45
		}
	st_case_45:
		switch data[p] {
		case 34:
			goto st47
		case 92:
			goto st51
		}
		if data[p] <= 31 {
			goto tr55
		}
		goto st46
	st46:
		if p++; p == pe {
			goto _test_eof46
		}
	st_case_46:
		switch data[p] {
		case 34:
			goto st47
		case 92:
			goto st51
		}
		if data[p] <= 31 {
			goto tr55
		}
		goto st46
	st47:
		if p++; p == pe {
			goto _test_eof47
		}
	st_case_47:
		switch data[p] {
		case 34:
			goto st45
		case 123:
			goto tr52
		case 125:
			goto tr53
		}
		goto st48
	st48:
		if p++; p == pe {
			goto _test_eof48
		}
	st_case_48:
		switch data[p] {
		case 34:
			goto st45
		case 123:
			goto tr52
		case 125:
			goto tr53
		}
		goto st49
	st49:
		if p++; p == pe {
			goto _test_eof49
		}
	st_case_49:
		switch data[p] {
		case 34:
			goto st45
		case 123:
			goto tr52
		case 125:
			goto tr53
		}
		goto st49
	tr52:
		{
			if top == skipMaxDepth {
				err = errMaxDepth
				{
					p++
					cs = 0
					goto _out
				}
			}
			if top+1 >= len(stack) {
				stack = append(stack, make([]int, 1+top-len(stack))...)
			}
			{
				stack[top] = 50
				top++
				goto st42
			}
		}
		goto st50
	st50:
		if p++; p == pe {
			goto _test_eof50
		}
	st_case_50:
		switch data[p] {
		case 34:
			goto st45
		case 123:
			goto tr52
		case 125:
			goto tr53
		}
		goto st48
	tr53:
		{
			top--
			cs = stack[top]
			goto _again
		}
		goto st72
	st72:
		if p++; p == pe {
			goto _test_eof72
		}
	st_case_72:
		goto st0
	st51:
		if p++; p == pe {
			goto _test_eof51
		}
	st_case_51:
		switch data[p] {
		case 34:
			goto st52
		case 47:
			goto st52
		case 92:
			goto st52
		case 98:
			goto st52
		case 102:
			goto st52
		case 110:
			goto st52
		case 114:
			goto st52
		case 116:
			goto st52
		case 117:
			goto st53
		}
		goto tr55
	st52:
		if p++; p == pe {
			goto _test_eof52
		}
	st_case_52:
		switch data[p] {
		case 34:
			goto st47
		case 92:
			goto st51
		}
		if data[p] <= 31 {
			goto tr55
		}
		goto st46
	st53:
		if p++; p == pe {
			goto _test_eof53
		}
	st_case_53:
		switch {
		case data[p] < 65:
			if 48 <= data[p] && data[p] <= 57 {
				goto st54
			}
		case data[p] > 70:
			if 97 <= data[p] && data[p] <= 102 {
				goto st54
			}
		default:
			goto st54
		}
		goto tr55
	st54:
		if p++; p == pe {
			goto _test_eof54
		}
	st_case_54:
		switch {
		case data[p] < 65:
			if 48 <= data[p] && data[p] <= 57 {
				goto st55
			}
		case data[p] > 70:
			if 97 <= data[p] && data[p] <= 102 {
				goto st55
			}
		default:
			goto st55
		}
		goto tr55
	st55:
		if p++; p == pe {
			goto _test_eof55
		}
	st_case_55:
		switch {
		case data[p] < 65:
			if 48 <= data[p] && data[p] <= 57 {
				goto st56
			}
		case data[p] > 70:
			if 97 <= data[p] && data[p] <= 102 {
				goto st56
			}
		default:
			goto st56
		}
		goto tr55
	st56:
		if p++; p == pe {
			goto _test_eof56
		}
	st_case_56:
		switch {
		case data[p] < 65:
			if 48 <= data[p] && data[p] <= 57 {
				goto st57
			}
		case data[p] > 70:
			if 97 <= data[p] && data[p] <= 102 {
				goto st57
			}
		default:
			goto st57
		}
		goto tr55
	st57:
		if p++; p == pe {
			goto _test_eof57
		}
	st_case_57:
		switch data[p] {
		case 34:
			goto st47
		case 92:
			goto st51
		}
		if data[p] <= 31 {
			goto tr55
		}
		goto st46
	st_out:
	_test_eof1:
		cs = 1
		goto _test_eof
	_test_eof2:
		cs = 2
		goto _test_eof
	_test_eof3:
		cs = 3
		goto _test_eof
	_test_eof4:
		cs = 4
		goto _test_eof
	_test_eof58:
		cs = 58
		goto _test_eof
	_test_eof5:
		cs = 5
		goto _test_eof
	_test_eof6:
		cs = 6
		goto _test_eof
	_test_eof7:
		cs = 7
		goto _test_eof
	_test_eof8:
		cs = 8
		goto _test_eof
	_test_eof9:
		cs = 9
		goto _test_eof
	_test_eof10:
		cs = 10
		goto _test_eof
	_test_eof11:
		cs = 11
		goto _test_eof
	_test_eof12:
		cs = 12
		goto _test_eof
	_test_eof59:
		cs = 59
		goto _test_eof
	_test_eof13:
		cs = 13
		goto _test_eof
	_test_eof60:
		cs = 60
		goto _test_eof
	_test_eof61:
		cs = 61
		goto _test_eof
	_test_eof14:
		cs = 14
		goto _test_eof
	_test_eof15:
		cs = 15
		goto _test_eof
	_test_eof62:
		cs = 62
		goto _test_eof
	_test_eof63:
		cs = 63
		goto _test_eof
	_test_eof64:
		cs = 64
		goto _test_eof
	_test_eof65:
		cs = 65
		goto _test_eof
	_test_eof66:
		cs = 66
		goto _test_eof
	_test_eof16:
		cs = 16
		goto _test_eof
	_test_eof17:
		cs = 17
		goto _test_eof
	_test_eof18:
		cs = 18
		goto _test_eof
	_test_eof19:
		cs = 19
		goto _test_eof
	_test_eof67:
		cs = 67
		goto _test_eof
	_test_eof20:
		cs = 20
		goto _test_eof
	_test_eof21:
		cs = 21
		goto _test_eof
	_test_eof22:
		cs = 22
		goto _test_eof
	_test_eof68:
		cs = 68
		goto _test_eof
	_test_eof23:
		cs = 23
		goto _test_eof
	_test_eof24:
		cs = 24
		goto _test_eof
	_test_eof25:
		cs = 25
		goto _test_eof
	_test_eof69:
		cs = 69
		goto _test_eof
	_test_eof70:
		cs = 70
		goto _test_eof
	_test_eof26:
		cs = 26
		goto _test_eof
	_test_eof27:
		cs = 27
		goto _test_eof
	_test_eof28:
		cs = 28
		goto _test_eof
	_test_eof29:
		cs = 29
		goto _test_eof
	_test_eof30:
		cs = 30
		goto _test_eof
	_test_eof31:
		cs = 31
		goto _test_eof
	_test_eof32:
		cs = 32
		goto _test_eof
	_test_eof33:
		cs = 33
		goto _test_eof
	_test_eof34:
		cs = 34
		goto _test_eof
	_test_eof71:
		cs = 71
		goto _test_eof
	_test_eof35:
		cs = 35
		goto _test_eof
	_test_eof36:
		cs = 36
		goto _test_eof
	_test_eof37:
		cs = 37
		goto _test_eof
	_test_eof38:
		cs = 38
		goto _test_eof
	_test_eof39:
		cs = 39
		goto _test_eof
	_test_eof40:
		cs = 40
		goto _test_eof
	_test_eof41:
		cs = 41
		goto _test_eof
	_test_eof42:
		cs = 42
		goto _test_eof
	_test_eof43:
		cs = 43
		goto _test_eof
	_test_eof44:
		cs = 44
		goto _test_eof
	_test_eof45:
		cs = 45
		goto _test_eof
	_test_eof46:
		cs = 46
		goto _test_eof
	_test_eof47:
		cs = 47
		goto _test_eof
	_test_eof48:
		cs = 48
		goto _test_eof
	_test_eof49:
		cs = 49
		goto _test_eof
	_test_eof50:
		cs = 50
		goto _test_eof
	_test_eof72:
		cs = 72
		goto _test_eof
	_test_eof51:
		cs = 51
		goto _test_eof
	_test_eof52:
		cs = 52
		goto _test_eof
	_test_eof53:
		cs = 53
		goto _test_eof
	_test_eof54:
		cs = 54
		goto _test_eof
	_test_eof55:
		cs = 55
		goto _test_eof
	_test_eof56:
		cs = 56
		goto _test_eof
	_test_eof57:
		cs = 57
		goto _test_eof

	_test_eof:
		{
		}
		if p == eof {
			switch cs {
			case 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25:

				return p, stack, errNoValidToken

			case 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41:
				err = errUnexpectedEOF
				{
					p++
					cs = 0
					goto _out
				}
				err = errInvalidArray
				{
					p++
					cs = 0
					goto _out
				}
			case 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57:
				err = errUnexpectedEOF
				{
					p++
					cs = 0
					goto _out
				}
				err = errInvalidObject
				{
					p++
					cs = 0
					goto _out
				}
			}
		}

	_out:
		{
		}
	}

	return p, stack, err
}

func skipValue(data []byte, stack []int) (int, []int, error) {
	var top int
	cs, p := 0, 0
	pe := len(data)
	eof := len(data)
	var err error

	const skipValue_start int = 1
	const skipValue_first_final int = 183
	const skipValue_error int = 0

	const skipValue_en_skip_array int = 23
	const skipValue_en_skip_object int = 90
	const skipValue_en_main int = 1

	{
		cs = skipValue_start
		top = 0
	}

	{
		if p == pe {
			goto _test_eof
		}
		goto _resume

	_again:
		switch cs {
		case 1:
			goto st1
		case 0:
			goto st0
		case 2:
			goto st2
		case 3:
			goto st3
		case 4:
			goto st4
		case 183:
			goto st183
		case 5:
			goto st5
		case 6:
			goto st6
		case 7:
			goto st7
		case 8:
			goto st8
		case 9:
			goto st9
		case 10:
			goto st10
		case 11:
			goto st11
		case 12:
			goto st12
		case 184:
			goto st184
		case 185:
			goto st185
		case 186:
			goto st186
		case 187:
			goto st187
		case 188:
			goto st188
		case 189:
			goto st189
		case 13:
			goto st13
		case 14:
			goto st14
		case 15:
			goto st15
		case 16:
			goto st16
		case 190:
			goto st190
		case 17:
			goto st17
		case 18:
			goto st18
		case 19:
			goto st19
		case 191:
			goto st191
		case 20:
			goto st20
		case 21:
			goto st21
		case 22:
			goto st22
		case 192:
			goto st192
		case 193:
			goto st193
		case 23:
			goto st23
		case 24:
			goto st24
		case 25:
			goto st25
		case 26:
			goto st26
		case 27:
			goto st27
		case 28:
			goto st28
		case 29:
			goto st29
		case 30:
			goto st30
		case 31:
			goto st31
		case 32:
			goto st32
		case 33:
			goto st33
		case 194:
			goto st194
		case 34:
			goto st34
		case 35:
			goto st35
		case 36:
			goto st36
		case 37:
			goto st37
		case 38:
			goto st38
		case 39:
			goto st39
		case 40:
			goto st40
		case 41:
			goto st41
		case 42:
			goto st42
		case 43:
			goto st43
		case 44:
			goto st44
		case 45:
			goto st45
		case 46:
			goto st46
		case 47:
			goto st47
		case 48:
			goto st48
		case 49:
			goto st49
		case 50:
			goto st50
		case 51:
			goto st51
		case 52:
			goto st52
		case 53:
			goto st53
		case 54:
			goto st54
		case 55:
			goto st55
		case 56:
			goto st56
		case 57:
			goto st57
		case 58:
			goto st58
		case 59:
			goto st59
		case 60:
			goto st60
		case 61:
			goto st61
		case 62:
			goto st62
		case 63:
			goto st63
		case 64:
			goto st64
		case 65:
			goto st65
		case 66:
			goto st66
		case 67:
			goto st67
		case 68:
			goto st68
		case 69:
			goto st69
		case 70:
			goto st70
		case 71:
			goto st71
		case 72:
			goto st72
		case 73:
			goto st73
		case 74:
			goto st74
		case 75:
			goto st75
		case 76:
			goto st76
		case 77:
			goto st77
		case 78:
			goto st78
		case 79:
			goto st79
		case 80:
			goto st80
		case 81:
			goto st81
		case 82:
			goto st82
		case 83:
			goto st83
		case 84:
			goto st84
		case 85:
			goto st85
		case 86:
			goto st86
		case 87:
			goto st87
		case 88:
			goto st88
		case 89:
			goto st89
		case 90:
			goto st90
		case 91:
			goto st91
		case 92:
			goto st92
		case 93:
			goto st93
		case 94:
			goto st94
		case 95:
			goto st95
		case 96:
			goto st96
		case 97:
			goto st97
		case 98:
			goto st98
		case 99:
			goto st99
		case 100:
			goto st100
		case 101:
			goto st101
		case 102:
			goto st102
		case 103:
			goto st103
		case 104:
			goto st104
		case 105:
			goto st105
		case 106:
			goto st106
		case 107:
			goto st107
		case 108:
			goto st108
		case 109:
			goto st109
		case 110:
			goto st110
		case 111:
			goto st111
		case 112:
			goto st112
		case 195:
			goto st195
		case 113:
			goto st113
		case 114:
			goto st114
		case 115:
			goto st115
		case 116:
			goto st116
		case 117:
			goto st117
		case 118:
			goto st118
		case 119:
			goto st119
		case 120:
			goto st120
		case 121:
			goto st121
		case 122:
			goto st122
		case 123:
			goto st123
		case 124:
			goto st124
		case 125:
			goto st125
		case 126:
			goto st126
		case 127:
			goto st127
		case 128:
			goto st128
		case 129:
			goto st129
		case 130:
			goto st130
		case 131:
			goto st131
		case 132:
			goto st132
		case 133:
			goto st133
		case 134:
			goto st134
		case 135:
			goto st135
		case 136:
			goto st136
		case 137:
			goto st137
		case 138:
			goto st138
		case 139:
			goto st139
		case 140:
			goto st140
		case 141:
			goto st141
		case 142:
			goto st142
		case 143:
			goto st143
		case 144:
			goto st144
		case 145:
			goto st145
		case 146:
			goto st146
		case 147:
			goto st147
		case 148:
			goto st148
		case 149:
			goto st149
		case 150:
			goto st150
		case 151:
			goto st151
		case 152:
			goto st152
		case 153:
			goto st153
		case 154:
			goto st154
		case 155:
			goto st155
		case 156:
			goto st156
		case 157:
			goto st157
		case 158:
			goto st158
		case 159:
			goto st159
		case 160:
			goto st160
		case 161:
			goto st161
		case 162:
			goto st162
		case 163:
			goto st163
		case 164:
			goto st164
		case 165:
			goto st165
		case 166:
			goto st166
		case 167:
			goto st167
		case 168:
			goto st168
		case 169:
			goto st169
		case 170:
			goto st170
		case 171:
			goto st171
		case 172:
			goto st172
		case 173:
			goto st173
		case 174:
			goto st174
		case 175:
			goto st175
		case 176:
			goto st176
		case 177:
			goto st177
		case 178:
			goto st178
		case 179:
			goto st179
		case 180:
			goto st180
		case 181:
			goto st181
		case 182:
			goto st182
		}

		if p++; p == pe {
			goto _test_eof
		}
	_resume:
		switch cs {
		case 1:
			goto st_case_1
		case 0:
			goto st_case_0
		case 2:
			goto st_case_2
		case 3:
			goto st_case_3
		case 4:
			goto st_case_4
		case 183:
			goto st_case_183
		case 5:
			goto st_case_5
		case 6:
			goto st_case_6
		case 7:
			goto st_case_7
		case 8:
			goto st_case_8
		case 9:
			goto st_case_9
		case 10:
			goto st_case_10
		case 11:
			goto st_case_11
		case 12:
			goto st_case_12
		case 184:
			goto st_case_184
		case 185:
			goto st_case_185
		case 186:
			goto st_case_186
		case 187:
			goto st_case_187
		case 188:
			goto st_case_188
		case 189:
			goto st_case_189
		case 13:
			goto st_case_13
		case 14:
			goto st_case_14
		case 15:
			goto st_case_15
		case 16:
			goto st_case_16
		case 190:
			goto st_case_190
		case 17:
			goto st_case_17
		case 18:
			goto st_case_18
		case 19:
			goto st_case_19
		case 191:
			goto st_case_191
		case 20:
			goto st_case_20
		case 21:
			goto st_case_21
		case 22:
			goto st_case_22
		case 192:
			goto st_case_192
		case 193:
			goto st_case_193
		case 23:
			goto st_case_23
		case 24:
			goto st_case_24
		case 25:
			goto st_case_25
		case 26:
			goto st_case_26
		case 27:
			goto st_case_27
		case 28:
			goto st_case_28
		case 29:
			goto st_case_29
		case 30:
			goto st_case_30
		case 31:
			goto st_case_31
		case 32:
			goto st_case_32
		case 33:
			goto st_case_33
		case 194:
			goto st_case_194
		case 34:
			goto st_case_34
		case 35:
			goto st_case_35
		case 36:
			goto st_case_36
		case 37:
			goto st_case_37
		case 38:
			goto st_case_38
		case 39:
			goto st_case_39
		case 40:
			goto st_case_40
		case 41:
			goto st_case_41
		case 42:
			goto st_case_42
		case 43:
			goto st_case_43
		case 44:
			goto st_case_44
		case 45:
			goto st_case_45
		case 46:
			goto st_case_46
		case 47:
			goto st_case_47
		case 48:
			goto st_case_48
		case 49:
			goto st_case_49
		case 50:
			goto st_case_50
		case 51:
			goto st_case_51
		case 52:
			goto st_case_52
		case 53:
			goto st_case_53
		case 54:
			goto st_case_54
		case 55:
			goto st_case_55
		case 56:
			goto st_case_56
		case 57:
			goto st_case_57
		case 58:
			goto st_case_58
		case 59:
			goto st_case_59
		case 60:
			goto st_case_60
		case 61:
			goto st_case_61
		case 62:
			goto st_case_62
		case 63:
			goto st_case_63
		case 64:
			goto st_case_64
		case 65:
			goto st_case_65
		case 66:
			goto st_case_66
		case 67:
			goto st_case_67
		case 68:
			goto st_case_68
		case 69:
			goto st_case_69
		case 70:
			goto st_case_70
		case 71:
			goto st_case_71
		case 72:
			goto st_case_72
		case 73:
			goto st_case_73
		case 74:
			goto st_case_74
		case 75:
			goto st_case_75
		case 76:
			goto st_case_76
		case 77:
			goto st_case_77
		case 78:
			goto st_case_78
		case 79:
			goto st_case_79
		case 80:
			goto st_case_80
		case 81:
			goto st_case_81
		case 82:
			goto st_case_82
		case 83:
			goto st_case_83
		case 84:
			goto st_case_84
		case 85:
			goto st_case_85
		case 86:
			goto st_case_86
		case 87:
			goto st_case_87
		case 88:
			goto st_case_88
		case 89:
			goto st_case_89
		case 90:
			goto st_case_90
		case 91:
			goto st_case_91
		case 92:
			goto st_case_92
		case 93:
			goto st_case_93
		case 94:
			goto st_case_94
		case 95:
			goto st_case_95
		case 96:
			goto st_case_96
		case 97:
			goto st_case_97
		case 98:
			goto st_case_98
		case 99:
			goto st_case_99
		case 100:
			goto st_case_100
		case 101:
			goto st_case_101
		case 102:
			goto st_case_102
		case 103:
			goto st_case_103
		case 104:
			goto st_case_104
		case 105:
			goto st_case_105
		case 106:
			goto st_case_106
		case 107:
			goto st_case_107
		case 108:
			goto st_case_108
		case 109:
			goto st_case_109
		case 110:
			goto st_case_110
		case 111:
			goto st_case_111
		case 112:
			goto st_case_112
		case 195:
			goto st_case_195
		case 113:
			goto st_case_113
		case 114:
			goto st_case_114
		case 115:
			goto st_case_115
		case 116:
			goto st_case_116
		case 117:
			goto st_case_117
		case 118:
			goto st_case_118
		case 119:
			goto st_case_119
		case 120:
			goto st_case_120
		case 121:
			goto st_case_121
		case 122:
			goto st_case_122
		case 123:
			goto st_case_123
		case 124:
			goto st_case_124
		case 125:
			goto st_case_125
		case 126:
			goto st_case_126
		case 127:
			goto st_case_127
		case 128:
			goto st_case_128
		case 129:
			goto st_case_129
		case 130:
			goto st_case_130
		case 131:
			goto st_case_131
		case 132:
			goto st_case_132
		case 133:
			goto st_case_133
		case 134:
			goto st_case_134
		case 135:
			goto st_case_135
		case 136:
			goto st_case_136
		case 137:
			goto st_case_137
		case 138:
			goto st_case_138
		case 139:
			goto st_case_139
		case 140:
			goto st_case_140
		case 141:
			goto st_case_141
		case 142:
			goto st_case_142
		case 143:
			goto st_case_143
		case 144:
			goto st_case_144
		case 145:
			goto st_case_145
		case 146:
			goto st_case_146
		case 147:
			goto st_case_147
		case 148:
			goto st_case_148
		case 149:
			goto st_case_149
		case 150:
			goto st_case_150
		case 151:
			goto st_case_151
		case 152:
			goto st_case_152
		case 153:
			goto st_case_153
		case 154:
			goto st_case_154
		case 155:
			goto st_case_155
		case 156:
			goto st_case_156
		case 157:
			goto st_case_157
		case 158:
			goto st_case_158
		case 159:
			goto st_case_159
		case 160:
			goto st_case_160
		case 161:
			goto st_case_161
		case 162:
			goto st_case_162
		case 163:
			goto st_case_163
		case 164:
			goto st_case_164
		case 165:
			goto st_case_165
		case 166:
			goto st_case_166
		case 167:
			goto st_case_167
		case 168:
			goto st_case_168
		case 169:
			goto st_case_169
		case 170:
			goto st_case_170
		case 171:
			goto st_case_171
		case 172:
			goto st_case_172
		case 173:
			goto st_case_173
		case 174:
			goto st_case_174
		case 175:
			goto st_case_175
		case 176:
			goto st_case_176
		case 177:
			goto st_case_177
		case 178:
			goto st_case_178
		case 179:
			goto st_case_179
		case 180:
			goto st_case_180
		case 181:
			goto st_case_181
		case 182:
			goto st_case_182
		}
		goto st_out
	st1:
		if p++; p == pe {
			goto _test_eof1
		}
	st_case_1:
		switch data[p] {
		case 13:
			goto st2
		case 32:
			goto st2
		case 34:
			goto st3
		case 45:
			goto st12
		case 48:
			goto st184
		case 91:
			goto tr6
		case 102:
			goto st13
		case 110:
			goto st17
		case 116:
			goto st20
		case 123:
			goto tr10
		}
		switch {
		case data[p] > 10:
			if 49 <= data[p] && data[p] <= 57 {
				goto st187
			}
		case data[p] >= 9:
			goto st2
		}
		goto tr0
	tr0:

		return p, stack, errNoValidToken

		goto st0
	tr30:
		err = errInvalidArray
		{
			p++
			cs = 0
			goto _out
		}
		goto st0
	tr98:
		err = errInvalidObject
		{
			p++
			cs = 0
			goto _out
		}
		goto st0
	st_case_0:
	st0:
		cs = 0
		goto _out
	st2:
		if p++; p == pe {
			goto _test_eof2
		}
	st_case_2:
		switch data[p] {
		case 13:
			goto st2
		case 32:
			goto st2
		case 34:
			goto st3
		case 45:
			goto st12
		case 48:
			goto st184
		case 91:
			goto tr6
		case 102:
			goto st13
		case 110:
			goto st17
		case 116:
			goto st20
		case 123:
			goto tr10
		}
		switch {
		case data[p] > 10:
			if 49 <= data[p] && data[p] <= 57 {
				goto st187
			}
		case data[p] >= 9:
			goto st2
		}
		goto tr0
	st3:
		if p++; p == pe {
			goto _test_eof3
		}
	st_case_3:
		switch data[p] {
		case 34:
			goto st183
		case 92:
			goto st5
		}
		if data[p] <= 31 {
			goto tr0
		}
		goto st4
	st4:
		if p++; p == pe {
			goto _test_eof4
		}
	st_case_4:
		switch data[p] {
		case 34:
			goto st183
		case 92:
			goto st5
		}
		if data[p] <= 31 {
			goto tr0
		}
		goto st4
	st183:
		if p++; p == pe {
			goto _test_eof183
		}
	st_case_183:
		goto st0
	st5:
		if p++; p == pe {
			goto _test_eof5
		}
	st_case_5:
		switch data[p] {
		case 34:
			goto st6
		case 47:
			goto st6
		case 92:
			goto st6
		case 98:
			goto st6
		case 102:
			goto st6
		case 110:
			goto st6
		case 114:
			goto st6
		case 116:
			goto st6
		case 117:
			goto st7
		}
		goto tr0
	st6:
		if p++; p == pe {
			goto _test_eof6
		}
	st_case_6:
		switch data[p] {
		case 34:
			goto st183
		case 92:
			goto st5
		}
		if data[p] <= 31 {
			goto tr0
		}
		goto st4
	st7:
		if p++; p == pe {
			goto _test_eof7
		}
	st_case_7:
		switch {
		case data[p] < 65:
			if 48 <= data[p] && data[p] <= 57 {
				goto st8
			}
		case data[p] > 70:
			if 97 <= data[p] && data[p] <= 102 {
				goto st8
			}
		default:
			goto st8
		}
		goto tr0
	st8:
		if p++; p == pe {
			goto _test_eof8
		}
	st_case_8:
		switch {
		case data[p] < 65:
			if 48 <= data[p] && data[p] <= 57 {
				goto st9
			}
		case data[p] > 70:
			if 97 <= data[p] && data[p] <= 102 {
				goto st9
			}
		default:
			goto st9
		}
		goto tr0
	st9:
		if p++; p == pe {
			goto _test_eof9
		}
	st_case_9:
		switch {
		case data[p] < 65:
			if 48 <= data[p] && data[p] <= 57 {
				goto st10
			}
		case data[p] > 70:
			if 97 <= data[p] && data[p] <= 102 {
				goto st10
			}
		default:
			goto st10
		}
		goto tr0
	st10:
		if p++; p == pe {
			goto _test_eof10
		}
	st_case_10:
		switch {
		case data[p] < 65:
			if 48 <= data[p] && data[p] <= 57 {
				goto st11
			}
		case data[p] > 70:
			if 97 <= data[p] && data[p] <= 102 {
				goto st11
			}
		default:
			goto st11
		}
		goto tr0
	st11:
		if p++; p == pe {
			goto _test_eof11
		}
	st_case_11:
		switch data[p] {
		case 34:
			goto st183
		case 92:
			goto st5
		}
		if data[p] <= 31 {
			goto tr0
		}
		goto st4
	st12:
		if p++; p == pe {
			goto _test_eof12
		}
	st_case_12:
		if data[p] == 48 {
			goto st184
		}
		if 49 <= data[p] && data[p] <= 57 {
			goto st187
		}
		goto tr0
	st184:
		if p++; p == pe {
			goto _test_eof184
		}
	st_case_184:
		switch data[p] {
		case 46:
			goto tr193
		case 69:
			goto tr194
		case 101:
			goto tr194
		}
		goto st0
	tr193:
		p, err = skipFloatDec(data, p+1, pe)
		goto st185
	st185:
		if p++; p == pe {
			goto _test_eof185
		}
	st_case_185:
		goto st0
	tr194:
		p, err = skipFloatExp(data, p+1, pe)
		goto st186
	st186:
		if p++; p == pe {
			goto _test_eof186
		}
	st_case_186:
		goto st0
	st187:
		if p++; p == pe {
			goto _test_eof187
		}
	st_case_187:
		switch data[p] {
		case 46:
			goto tr193
		case 69:
			goto tr194
		case 101:
			goto tr194
		}
		if 48 <= data[p] && data[p] <= 57 {
			goto st188
		}
		goto st0
	st188:
		if p++; p == pe {
			goto _test_eof188
		}
	st_case_188:
		switch data[p] {
		case 46:
			goto tr193
		case 69:
			goto tr194
		case 101:
			goto tr194
		}
		if 48 <= data[p] && data[p] <= 57 {
			goto st188
		}
		goto st0
	tr6:
		{
			if top == skipMaxDepth {
				err = errMaxDepth
				{
					p++
					cs = 0
					goto _out
				}
			}
			if top+1 >= len(stack) {
				stack = append(stack, make([]int, 1+top-len(stack))...)
			}
			{
				stack[top] = 189
				top++
				goto st23
			}
		}
		goto st189
	st189:
		if p++; p == pe {
			goto _test_eof189
		}
	st_case_189:
		goto st0
	st13:
		if p++; p == pe {
			goto _test_eof13
		}
	st_case_13:
		if data[p] == 97 {
			goto st14
		}
		goto tr0
	st14:
		if p++; p == pe {
			goto _test_eof14
		}
	st_case_14:
		if data[p] == 108 {
			goto st15
		}
		goto tr0
	st15:
		if p++; p == pe {
			goto _test_eof15
		}
	st_case_15:
		if data[p] == 115 {
			goto st16
		}
		goto tr0
	st16:
		if p++; p == pe {
			goto _test_eof16
		}
	st_case_16:
		if data[p] == 101 {
			goto st190
		}
		goto tr0
	st190:
		if p++; p == pe {
			goto _test_eof190
		}
	st_case_190:
		goto st0
	st17:
		if p++; p == pe {
			goto _test_eof17
		}
	st_case_17:
		if data[p] == 117 {
			goto st18
		}
		goto tr0
	st18:
		if p++; p == pe {
			goto _test_eof18
		}
	st_case_18:
		if data[p] == 108 {
			goto st19
		}
		goto tr0
	st19:
		if p++; p == pe {
			goto _test_eof19
		}
	st_case_19:
		if data[p] == 108 {
			goto st191
		}
		goto tr0
	st191:
		if p++; p == pe {
			goto _test_eof191
		}
	st_case_191:
		goto st0
	st20:
		if p++; p == pe {
			goto _test_eof20
		}
	st_case_20:
		if data[p] == 114 {
			goto st21
		}
		goto tr0
	st21:
		if p++; p == pe {
			goto _test_eof21
		}
	st_case_21:
		if data[p] == 117 {
			goto st22
		}
		goto tr0
	st22:
		if p++; p == pe {
			goto _test_eof22
		}
	st_case_22:
		if data[p] == 101 {
			goto st192
		}
		goto tr0
	st192:
		if p++; p == pe {
			goto _test_eof192
		}
	st_case_192:
		goto st0
	tr10:
		{
			if top == skipMaxDepth {
				err = errMaxDepth
				{
					p++
					cs = 0
					goto _out
				}
			}
			if top+1 >= len(stack) {
				stack = append(stack, make([]int, 1+top-len(stack))...)
			}
			{
				stack[top] = 193
				top++
				goto st90
			}
		}
		goto st193
	st193:
		if p++; p == pe {
			goto _test_eof193
		}
	st_case_193:
		goto st0
	st23:
		if p++; p == pe {
			goto _test_eof23
		}
	st_case_23:
		switch data[p] {
		case 13:
			goto st24
		case 32:
			goto st24
		case 34:
			goto st25
		case 45:
			goto st69
		case 48:
			goto st70
		case 91:
			goto tr36
		case 93:
			goto tr37
		case 102:
			goto st76
		case 110:
			goto st81
		case 116:
			goto st85
		case 123:
			goto tr41
		}
		switch {
		case data[p] > 10:
			if 49 <= data[p] && data[p] <= 57 {
				goto st73
			}
		case data[p] >= 9:
			goto st24
		}
		goto tr30
	st24:
		if p++; p == pe {
			goto _test_eof24
		}
	st_case_24:
		switch data[p] {
		case 13:
			goto st24
		case 32:
			goto st24
		case 34:
			goto st25
		case 45:
			goto st69
		case 48:
			goto st70
		case 91:
			goto tr36
		case 93:
			goto tr37
		case 102:
			goto st76
		case 110:
			goto st81
		case 116:
			goto st85
		case 123:
			goto tr41
		}
		switch {
		case data[p] > 10:
			if 49 <= data[p] && data[p] <= 57 {
				goto st73
			}
		case data[p] >= 9:
			goto st24
		}
		goto tr30
	st25:
		if p++; p == pe {
			goto _test_eof25
		}
	st_case_25:
		switch data[p] {
		case 34:
			goto st27
		case 92:
			goto st62
		}
		if data[p] <= 31 {
			goto tr30
		}
		goto st26
	st26:
		if p++; p == pe {
			goto _test_eof26
		}
	st_case_26:
		switch data[p] {
		case 34:
			goto st27
		case 92:
			goto st62
		}
		if data[p] <= 31 {
			goto tr30
		}
		goto st26
	st27:
		if p++; p == pe {
			goto _test_eof27
		}
	st_case_27:
		switch data[p] {
		case 13:
			goto st28
		case 32:
			goto st28
		case 44:
			goto st29
		case 93:
			goto tr37
		}
		if 9 <= data[p] && data[p] <= 10 {
			goto st28
		}
		goto tr30
	st28:
		if p++; p == pe {
			goto _test_eof28
		}
	st_case_28:
		switch data[p] {
		case 13:
			goto st28
		case 32:
			goto st28
		case 44:
			goto st29
		case 93:
			goto tr37
		}
		if 9 <= data[p] && data[p] <= 10 {
			goto st28
		}
		goto tr30
	st29:
		if p++; p == pe {
			goto _test_eof29
		}
	st_case_29:
		switch data[p] {
		case 13:
			goto st30
		case 32:
			goto st30
		case 34:
			goto st31
		case 45:
			goto st41
		case 48:
			goto st42
		case 91:
			goto tr52
		case 102:
			goto st48
		case 110:
			goto st53
		case 116:
			goto st57
		case 123:
			goto tr56
		}
		switch {
		case data[p] > 10:
			if 49 <= data[p] && data[p] <= 57 {
				goto st45
			}
		case data[p] >= 9:
			goto st30
		}
		goto tr30
	st30:
		if p++; p == pe {
			goto _test_eof30
		}
	st_case_30:
		switch data[p] {
		case 13:
			goto st30
		case 32:
			goto st30
		case 34:
			goto st31
		case 45:
			goto st41
		case 48:
			goto st42
		case 91:
			goto tr52
		case 102:
			goto st48
		case 110:
			goto st53
		case 116:
			goto st57
		case 123:
			goto tr56
		}
		switch {
		case data[p] > 10:
			if 49 <= data[p] && data[p] <= 57 {
				goto st45
			}
		case data[p] >= 9:
			goto st30
		}
		goto tr30
	st31:
		if p++; p == pe {
			goto _test_eof31
		}
	st_case_31:
		switch data[p] {
		case 34:
			goto st33
		case 92:
			goto st34
		}
		if data[p] <= 31 {
			goto tr30
		}
		goto st32
	st32:
		if p++; p == pe {
			goto _test_eof32
		}
	st_case_32:
		switch data[p] {
		case 34:
			goto st33
		case 92:
			goto st34
		}
		if data[p] <= 31 {
			goto tr30
		}
		goto st32
	st33:
		if p++; p == pe {
			goto _test_eof33
		}
	st_case_33:
		switch data[p] {
		case 13:
			goto st28
		case 32:
			goto st28
		case 44:
			goto st29
		case 93:
			goto tr37
		}
		if 9 <= data[p] && data[p] <= 10 {
			goto st28
		}
		goto tr30
	tr37:
		{
			top--
			cs = stack[top]
			goto _again
		}
		goto st194
	st194:
		if p++; p == pe {
			goto _test_eof194
		}
	st_case_194:
		goto st0
	st34:
		if p++; p == pe {
			goto _test_eof34
		}
	st_case_34:
		switch data[p] {
		case 34:
			goto st35
		case 47:
			goto st35
		case 92:
			goto st35
		case 98:
			goto st35
		case 102:
			goto st35
		case 110:
			goto st35
		case 114:
			goto st35
		case 116:
			goto st35
		case 117:
			goto st36
		}
		goto tr30
	st35:
		if p++; p == pe {
			goto _test_eof35
		}
	st_case_35:
		switch data[p] {
		case 34:
			goto st33
		case 92:
			goto st34
		}
		if data[p] <= 31 {
			goto tr30
		}
		goto st32
	st36:
		if p++; p == pe {
			goto _test_eof36
		}
	st_case_36:
		switch {
		case data[p] < 65:
			if 48 <= data[p] && data[p] <= 57 {
				goto st37
			}
		case data[p] > 70:
			if 97 <= data[p] && data[p] <= 102 {
				goto st37
			}
		default:
			goto st37
		}
		goto tr30
	st37:
		if p++; p == pe {
			goto _test_eof37
		}
	st_case_37:
		switch {
		case data[p] < 65:
			if 48 <= data[p] && data[p] <= 57 {
				goto st38
			}
		case data[p] > 70:
			if 97 <= data[p] && data[p] <= 102 {
				goto st38
			}
		default:
			goto st38
		}
		goto tr30
	st38:
		if p++; p == pe {
			goto _test_eof38
		}
	st_case_38:
		switch {
		case data[p] < 65:
			if 48 <= data[p] && data[p] <= 57 {
				goto st39
			}
		case data[p] > 70:
			if 97 <= data[p] && data[p] <= 102 {
				goto st39
			}
		default:
			goto st39
		}
		goto tr30
	st39:
		if p++; p == pe {
			goto _test_eof39
		}
	st_case_39:
		switch {
		case data[p] < 65:
			if 48 <= data[p] && data[p] <= 57 {
				goto st40
			}
		case data[p] > 70:
			if 97 <= data[p] && data[p] <= 102 {
				goto st40
			}
		default:
			goto st40
		}
		goto tr30
	st40:
		if p++; p == pe {
			goto _test_eof40
		}
	st_case_40:
		switch data[p] {
		case 34:
			goto st33
		case 92:
			goto st34
		}
		if data[p] <= 31 {
			goto tr30
		}
		goto st32
	st41:
		if p++; p == pe {
			goto _test_eof41
		}
	st_case_41:
		if data[p] == 48 {
			goto st42
		}
		if 49 <= data[p] && data[p] <= 57 {
			goto st45
		}
		goto tr30
	st42:
		if p++; p == pe {
			goto _test_eof42
		}
	st_case_42:
		switch data[p] {
		case 13:
			goto st28
		case 32:
			goto st28
		case 44:
			goto st29
		case 46:
			goto tr66
		case 69:
			goto tr67
		case 93:
			goto tr37
		case 101:
			goto tr67
		}
		if 9 <= data[p] && data[p] <= 10 {
			goto st28
		}
		goto tr30
	tr66:
		p, err = skipFloatDec(data, p+1, pe)
		goto st43
	st43:
		if p++; p == pe {
			goto _test_eof43
		}
	st_case_43:
		switch data[p] {
		case 13:
			goto st28
		case 32:
			goto st28
		case 44:
			goto st29
		case 93:
			goto tr37
		}
		if 9 <= data[p] && data[p] <= 10 {
			goto st28
		}
		goto tr30
	tr67:
		p, err = skipFloatExp(data, p+1, pe)
		goto st44
	st44:
		if p++; p == pe {
			goto _test_eof44
		}
	st_case_44:
		switch data[p] {
		case 13:
			goto st28
		case 32:
			goto st28
		case 44:
			goto st29
		case 93:
			goto tr37
		}
		if 9 <= data[p] && data[p] <= 10 {
			goto st28
		}
		goto tr30
	st45:
		if p++; p == pe {
			goto _test_eof45
		}
	st_case_45:
		switch data[p] {
		case 13:
			goto st28
		case 32:
			goto st28
		case 44:
			goto st29
		case 46:
			goto tr66
		case 69:
			goto tr67
		case 93:
			goto tr37
		case 101:
			goto tr67
		}
		switch {
		case data[p] > 10:
			if 48 <= data[p] && data[p] <= 57 {
				goto st46
			}
		case data[p] >= 9:
			goto st28
		}
		goto tr30
	st46:
		if p++; p == pe {
			goto _test_eof46
		}
	st_case_46:
		switch data[p] {
		case 13:
			goto st28
		case 32:
			goto st28
		case 44:
			goto st29
		case 46:
			goto tr66
		case 69:
			goto tr67
		case 93:
			goto tr37
		case 101:
			goto tr67
		}
		switch {
		case data[p] > 10:
			if 48 <= data[p] && data[p] <= 57 {
				goto st46
			}
		case data[p] >= 9:
			goto st28
		}
		goto tr30
	tr52:
		{
			if top == skipMaxDepth {
				err = errMaxDepth
				{
					p++
					cs = 0
					goto _out
				}
			}
			if top+1 >= len(stack) {
				stack = append(stack, make([]int, 1+top-len(stack))...)
			}
			{
				stack[top] = 47
				top++
				goto st23
			}
		}
		goto st47
	st47:
		if p++; p == pe {
			goto _test_eof47
		}
	st_case_47:
		switch data[p] {
		case 13:
			goto st28
		case 32:
			goto st28
		case 44:
			goto st29
		case 93:
			goto tr37
		}
		if 9 <= data[p] && data[p] <= 10 {
			goto st28
		}
		goto tr30
	st48:
		if p++; p == pe {
			goto _test_eof48
		}
	st_case_48:
		if data[p] == 97 {
			goto st49
		}
		goto tr30
	st49:
		if p++; p == pe {
			goto _test_eof49
		}
	st_case_49:
		if data[p] == 108 {
			goto st50
		}
		goto tr30
	st50:
		if p++; p == pe {
			goto _test_eof50
		}
	st_case_50:
		if data[p] == 115 {
			goto st51
		}
		goto tr30
	st51:
		if p++; p == pe {
			goto _test_eof51
		}
	st_case_51:
		if data[p] == 101 {
			goto st52
		}
		goto tr30
	st52:
		if p++; p == pe {
			goto _test_eof52
		}
	st_case_52:
		switch data[p] {
		case 13:
			goto st28
		case 32:
			goto st28
		case 44:
			goto st29
		case 93:
			goto tr37
		}
		if 9 <= data[p] && data[p] <= 10 {
			goto st28
		}
		goto tr30
	st53:
		if p++; p == pe {
			goto _test_eof53
		}
	st_case_53:
		if data[p] == 117 {
			goto st54
		}
		goto tr30
	st54:
		if p++; p == pe {
			goto _test_eof54
		}
	st_case_54:
		if data[p] == 108 {
			goto st55
		}
		goto tr30
	st55:
		if p++; p == pe {
			goto _test_eof55
		}
	st_case_55:
		if data[p] == 108 {
			goto st56
		}
		goto tr30
	st56:
		if p++; p == pe {
			goto _test_eof56
		}
	st_case_56:
		switch data[p] {
		case 13:
			goto st28
		case 32:
			goto st28
		case 44:
			goto st29
		case 93:
			goto tr37
		}
		if 9 <= data[p] && data[p] <= 10 {
			goto st28
		}
		goto tr30
	st57:
		if p++; p == pe {
			goto _test_eof57
		}
	st_case_57:
		if data[p] == 114 {
			goto st58
		}
		goto tr30
	st58:
		if p++; p == pe {
			goto _test_eof58
		}
	st_case_58:
		if data[p] == 117 {
			goto st59
		}
		goto tr30
	st59:
		if p++; p == pe {
			goto _test_eof59
		}
	st_case_59:
		if data[p] == 101 {
			goto st60
		}
		goto tr30
	st60:
		if p++; p == pe {
			goto _test_eof60
		}
	st_case_60:
		switch data[p] {
		case 13:
			goto st28
		case 32:
			goto st28
		case 44:
			goto st29
		case 93:
			goto tr37
		}
		if 9 <= data[p] && data[p] <= 10 {
			goto st28
		}
		goto tr30
	tr56:
		{
			if top == skipMaxDepth {
				err = errMaxDepth
				{
					p++
					cs = 0
					goto _out
				}
			}
			if top+1 >= len(stack) {
				stack = append(stack, make([]int, 1+top-len(stack))...)
			}
			{
				stack[top] = 61
				top++
				goto st90
			}
		}
		goto st61
	st61:
		if p++; p == pe {
			goto _test_eof61
		}
	st_case_61:
		switch data[p] {
		case 13:
			goto st28
		case 32:
			goto st28
		case 44:
			goto st29
		case 93:
			goto tr37
		}
		if 9 <= data[p] && data[p] <= 10 {
			goto st28
		}
		goto tr30
	st62:
		if p++; p == pe {
			goto _test_eof62
		}
	st_case_62:
		switch data[p] {
		case 34:
			goto st63
		case 47:
			goto st63
		case 92:
			goto st63
		case 98:
			goto st63
		case 102:
			goto st63
		case 110:
			goto st63
		case 114:
			goto st63
		case 116:
			goto st63
		case 117:
			goto st64
		}
		goto tr30
	st63:
		if p++; p == pe {
			goto _test_eof63
		}
	st_case_63:
		switch data[p] {
		case 34:
			goto st27
		case 92:
			goto st62
		}
		if data[p] <= 31 {
			goto tr30
		}
		goto st26
	st64:
		if p++; p == pe {
			goto _test_eof64
		}
	st_case_64:
		switch {
		case data[p] < 65:
			if 48 <= data[p] && data[p] <= 57 {
				goto st65
			}
		case data[p] > 70:
			if 97 <= data[p] && data[p] <= 102 {
				goto st65
			}
		default:
			goto st65
		}
		goto tr30
	st65:
		if p++; p == pe {
			goto _test_eof65
		}
	st_case_65:
		switch {
		case data[p] < 65:
			if 48 <= data[p] && data[p] <= 57 {
				goto st66
			}
		case data[p] > 70:
			if 97 <= data[p] && data[p] <= 102 {
				goto st66
			}
		default:
			goto st66
		}
		goto tr30
	st66:
		if p++; p == pe {
			goto _test_eof66
		}
	st_case_66:
		switch {
		case data[p] < 65:
			if 48 <= data[p] && data[p] <= 57 {
				goto st67
			}
		case data[p] > 70:
			if 97 <= data[p] && data[p] <= 102 {
				goto st67
			}
		default:
			goto st67
		}
		goto tr30
	st67:
		if p++; p == pe {
			goto _test_eof67
		}
	st_case_67:
		switch {
		case data[p] < 65:
			if 48 <= data[p] && data[p] <= 57 {
				goto st68
			}
		case data[p] > 70:
			if 97 <= data[p] && data[p] <= 102 {
				goto st68
			}
		default:
			goto st68
		}
		goto tr30
	st68:
		if p++; p == pe {
			goto _test_eof68
		}
	st_case_68:
		switch data[p] {
		case 34:
			goto st27
		case 92:
			goto st62
		}
		if data[p] <= 31 {
			goto tr30
		}
		goto st26
	st69:
		if p++; p == pe {
			goto _test_eof69
		}
	st_case_69:
		if data[p] == 48 {
			goto st70
		}
		if 49 <= data[p] && data[p] <= 57 {
			goto st73
		}
		goto tr30
	st70:
		if p++; p == pe {
			goto _test_eof70
		}
	st_case_70:
		switch data[p] {
		case 13:
			goto st28
		case 32:
			goto st28
		case 44:
			goto st29
		case 46:
			goto tr85
		case 69:
			goto tr86
		case 93:
			goto tr37
		case 101:
			goto tr86
		}
		if 9 <= data[p] && data[p] <= 10 {
			goto st28
		}
		goto tr30
	tr85:
		p, err = skipFloatDec(data, p+1, pe)
		goto st71
	st71:
		if p++; p == pe {
			goto _test_eof71
		}
	st_case_71:
		switch data[p] {
		case 13:
			goto st28
		case 32:
			goto st28
		case 44:
			goto st29
		case 93:
			goto tr37
		}
		if 9 <= data[p] && data[p] <= 10 {
			goto st28
		}
		goto tr30
	tr86:
		p, err = skipFloatExp(data, p+1, pe)
		goto st72
	st72:
		if p++; p == pe {
			goto _test_eof72
		}
	st_case_72:
		switch data[p] {
		case 13:
			goto st28
		case 32:
			goto st28
		case 44:
			goto st29
		case 93:
			goto tr37
		}
		if 9 <= data[p] && data[p] <= 10 {
			goto st28
		}
		goto tr30
	st73:
		if p++; p == pe {
			goto _test_eof73
		}
	st_case_73:
		switch data[p] {
		case 13:
			goto st28
		case 32:
			goto st28
		case 44:
			goto st29
		case 46:
			goto tr85
		case 69:
			goto tr86
		case 93:
			goto tr37
		case 101:
			goto tr86
		}
		switch {
		case data[p] > 10:
			if 48 <= data[p] && data[p] <= 57 {
				goto st74
			}
		case data[p] >= 9:
			goto st28
		}
		goto tr30
	st74:
		if p++; p == pe {
			goto _test_eof74
		}
	st_case_74:
		switch data[p] {
		case 13:
			goto st28
		case 32:
			goto st28
		case 44:
			goto st29
		case 46:
			goto tr85
		case 69:
			goto tr86
		case 93:
			goto tr37
		case 101:
			goto tr86
		}
		switch {
		case data[p] > 10:
			if 48 <= data[p] && data[p] <= 57 {
				goto st74
			}
		case data[p] >= 9:
			goto st28
		}
		goto tr30
	tr36:
		{
			if top == skipMaxDepth {
				err = errMaxDepth
				{
					p++
					cs = 0
					goto _out
				}
			}
			if top+1 >= len(stack) {
				stack = append(stack, make([]int, 1+top-len(stack))...)
			}
			{
				stack[top] = 75
				top++
				goto st23
			}
		}
		goto st75
	st75:
		if p++; p == pe {
			goto _test_eof75
		}
	st_case_75:
		switch data[p] {
		case 13:
			goto st28
		case 32:
			goto st28
		case 44:
			goto st29
		case 93:
			goto tr37
		}
		if 9 <= data[p] && data[p] <= 10 {
			goto st28
		}
		goto tr30
	st76:
		if p++; p == pe {
			goto _test_eof76
		}
	st_case_76:
		if data[p] == 97 {
			goto st77
		}
		goto tr30
	st77:
		if p++; p == pe {
			goto _test_eof77
		}
	st_case_77:
		if data[p] == 108 {
			goto st78
		}
		goto tr30
	st78:
		if p++; p == pe {
			goto _test_eof78
		}
	st_case_78:
		if data[p] == 115 {
			goto st79
		}
		goto tr30
	st79:
		if p++; p == pe {
			goto _test_eof79
		}
	st_case_79:
		if data[p] == 101 {
			goto st80
		}
		goto tr30
	st80:
		if p++; p == pe {
			goto _test_eof80
		}
	st_case_80:
		switch data[p] {
		case 13:
			goto st28
		case 32:
			goto st28
		case 44:
			goto st29
		case 93:
			goto tr37
		}
		if 9 <= data[p] && data[p] <= 10 {
			goto st28
		}
		goto tr30
	st81:
		if p++; p == pe {
			goto _test_eof81
		}
	st_case_81:
		if data[p] == 117 {
			goto st82
		}
		goto tr30
	st82:
		if p++; p == pe {
			goto _test_eof82
		}
	st_case_82:
		if data[p] == 108 {
			goto st83
		}
		goto tr30
	st83:
		if p++; p == pe {
			goto _test_eof83
		}
	st_case_83:
		if data[p] == 108 {
			goto st84
		}
		goto tr30
	st84:
		if p++; p == pe {
			goto _test_eof84
		}
	st_case_84:
		switch data[p] {
		case 13:
			goto st28
		case 32:
			goto st28
		case 44:
			goto st29
		case 93:
			goto tr37
		}
		if 9 <= data[p] && data[p] <= 10 {
			goto st28
		}
		goto tr30
	st85:
		if p++; p == pe {
			goto _test_eof85
		}
	st_case_85:
		if data[p] == 114 {
			goto st86
		}
		goto tr30
	st86:
		if p++; p == pe {
			goto _test_eof86
		}
	st_case_86:
		if data[p] == 117 {
			goto st87
		}
		goto tr30
	st87:
		if p++; p == pe {
			goto _test_eof87
		}
	st_case_87:
		if data[p] == 101 {
			goto st88
		}
		goto tr30
	st88:
		if p++; p == pe {
			goto _test_eof88
		}
	st_case_88:
		switch data[p] {
		case 13:
			goto st28
		case 32:
			goto st28
		case 44:
			goto st29
		case 93:
			goto tr37
		}
		if 9 <= data[p] && data[p] <= 10 {
			goto st28
		}
		goto tr30
	tr41:
		{
			if top == skipMaxDepth {
				err = errMaxDepth
				{
					p++
					cs = 0
					goto _out
				}
			}
			if top+1 >= len(stack) {
				stack = append(stack, make([]int, 1+top-len(stack))...)
			}
			{
				stack[top] = 89
				top++
				goto st90
			}
		}
		goto st89
	st89:
		if p++; p == pe {
			goto _test_eof89
		}
	st_case_89:
		switch data[p] {
		case 13:
			goto st28
		case 32:
			goto st28
		case 44:
			goto st29
		case 93:
			goto tr37
		}
		if 9 <= data[p] && data[p] <= 10 {
			goto st28
		}
		goto tr30
	st90:
		if p++; p == pe {
			goto _test_eof90
		}
	st_case_90:
		switch data[p] {
		case 13:
			goto st91
		case 32:
			goto st91
		case 34:
			goto st92
		case 125:
			goto tr101
		}
		if 9 <= data[p] && data[p] <= 10 {
			goto st91
		}
		goto tr98
	st91:
		if p++; p == pe {
			goto _test_eof91
		}
	st_case_91:
		switch data[p] {
		case 13:
			goto st91
		case 32:
			goto st91
		case 34:
			goto st92
		case 125:
			goto tr101
		}
		if 9 <= data[p] && data[p] <= 10 {
			goto st91
		}
		goto tr98
	st92:
		if p++; p == pe {
			goto _test_eof92
		}
	st_case_92:
		switch data[p] {
		case 34:
			goto st94
		case 92:
			goto st176
		}
		if data[p] <= 31 {
			goto tr98
		}
		goto st93
	st93:
		if p++; p == pe {
			goto _test_eof93
		}
	st_case_93:
		switch data[p] {
		case 34:
			goto st94
		case 92:
			goto st176
		}
		if data[p] <= 31 {
			goto tr98
		}
		goto st93
	st94:
		if p++; p == pe {
			goto _test_eof94
		}
	st_case_94:
		switch data[p] {
		case 13:
			goto st95
		case 32:
			goto st95
		case 58:
			goto st96
		}
		if 9 <= data[p] && data[p] <= 10 {
			goto st95
		}
		goto tr98
	st95:
		if p++; p == pe {
			goto _test_eof95
		}
	st_case_95:
		switch data[p] {
		case 13:
			goto st95
		case 32:
			goto st95
		case 58:
			goto st96
		}
		if 9 <= data[p] && data[p] <= 10 {
			goto st95
		}
		goto tr98
	st96:
		if p++; p == pe {
			goto _test_eof96
		}
	st_case_96:
		switch data[p] {
		case 13:
			goto st97
		case 32:
			goto st97
		case 34:
			goto st98
		case 45:
			goto st155
		case 48:
			goto st156
		case 91:
			goto tr112
		case 102:
			goto st162
		case 110:
			goto st167
		case 116:
			goto st171
		case 123:
			goto tr116
		}
		switch {
		case data[p] > 10:
			if 49 <= data[p] && data[p] <= 57 {
				goto st159
			}
		case data[p] >= 9:
			goto st97
		}
		goto tr98
	st97:
		if p++; p == pe {
			goto _test_eof97
		}
	st_case_97:
		switch data[p] {
		case 13:
			goto st97
		case 32:
			goto st97
		case 34:
			goto st98
		case 45:
			goto st155
		case 48:
			goto st156
		case 91:
			goto tr112
		case 102:
			goto st162
		case 110:
			goto st167
		case 116:
			goto st171
		case 123:
			goto tr116
		}
		switch {
		case data[p] > 10:
			if 49 <= data[p] && data[p] <= 57 {
				goto st159
			}
		case data[p] >= 9:
			goto st97
		}
		goto tr98
	st98:
		if p++; p == pe {
			goto _test_eof98
		}
	st_case_98:
		switch data[p] {
		case 34:
			goto st100
		case 92:
			goto st148
		}
		if data[p] <= 31 {
			goto tr98
		}
		goto st99
	st99:
		if p++; p == pe {
			goto _test_eof99
		}
	st_case_99:
		switch data[p] {
		case 34:
			goto st100
		case 92:
			goto st148
		}
		if data[p] <= 31 {
			goto tr98
		}
		goto st99
	st100:
		if p++; p == pe {
			goto _test_eof100
		}
	st_case_100:
		switch data[p] {
		case 13:
			goto st101
		case 32:
			goto st101
		case 44:
			goto st102
		case 125:
			goto tr101
		}
		if 9 <= data[p] && data[p] <= 10 {
			goto st101
		}
		goto tr98
	st101:
		if p++; p == pe {
			goto _test_eof101
		}
	st_case_101:
		switch data[p] {
		case 13:
			goto st101
		case 32:
			goto st101
		case 44:
			goto st102
		case 125:
			goto tr101
		}
		if 9 <= data[p] && data[p] <= 10 {
			goto st101
		}
		goto tr98
	st102:
		if p++; p == pe {
			goto _test_eof102
		}
	st_case_102:
		switch data[p] {
		case 13:
			goto st103
		case 32:
			goto st103
		case 34:
			goto st104
		}
		if 9 <= data[p] && data[p] <= 10 {
			goto st103
		}
		goto tr98
	st103:
		if p++; p == pe {
			goto _test_eof103
		}
	st_case_103:
		switch data[p] {
		case 13:
			goto st103
		case 32:
			goto st103
		case 34:
			goto st104
		}
		if 9 <= data[p] && data[p] <= 10 {
			goto st103
		}
		goto tr98
	st104:
		if p++; p == pe {
			goto _test_eof104
		}
	st_case_104:
		switch data[p] {
		case 34:
			goto st106
		case 92:
			goto st141
		}
		if data[p] <= 31 {
			goto tr98
		}
		goto st105
	st105:
		if p++; p == pe {
			goto _test_eof105
		}
	st_case_105:
		switch data[p] {
		case 34:
			goto st106
		case 92:
			goto st141
		}
		if data[p] <= 31 {
			goto tr98
		}
		goto st105
	st106:
		if p++; p == pe {
			goto _test_eof106
		}
	st_case_106:
		switch data[p] {
		case 13:
			goto st107
		case 32:
			goto st107
		case 58:
			goto st108
		}
		if 9 <= data[p] && data[p] <= 10 {
			goto st107
		}
		goto tr98
	st107:
		if p++; p == pe {
			goto _test_eof107
		}
	st_case_107:
		switch data[p] {
		case 13:
			goto st107
		case 32:
			goto st107
		case 58:
			goto st108
		}
		if 9 <= data[p] && data[p] <= 10 {
			goto st107
		}
		goto tr98
	st108:
		if p++; p == pe {
			goto _test_eof108
		}
	st_case_108:
		switch data[p] {
		case 13:
			goto st109
		case 32:
			goto st109
		case 34:
			goto st110
		case 45:
			goto st120
		case 48:
			goto st121
		case 91:
			goto tr134
		case 102:
			goto st127
		case 110:
			goto st132
		case 116:
			goto st136
		case 123:
			goto tr138
		}
		switch {
		case data[p] > 10:
			if 49 <= data[p] && data[p] <= 57 {
				goto st124
			}
		case data[p] >= 9:
			goto st109
		}
		goto tr98
	st109:
		if p++; p == pe {
			goto _test_eof109
		}
	st_case_109:
		switch data[p] {
		case 13:
			goto st109
		case 32:
			goto st109
		case 34:
			goto st110
		case 45:
			goto st120
		case 48:
			goto st121
		case 91:
			goto tr134
		case 102:
			goto st127
		case 110:
			goto st132
		case 116:
			goto st136
		case 123:
			goto tr138
		}
		switch {
		case data[p] > 10:
			if 49 <= data[p] && data[p] <= 57 {
				goto st124
			}
		case data[p] >= 9:
			goto st109
		}
		goto tr98
	st110:
		if p++; p == pe {
			goto _test_eof110
		}
	st_case_110:
		switch data[p] {
		case 34:
			goto st112
		case 92:
			goto st113
		}
		if data[p] <= 31 {
			goto tr98
		}
		goto st111
	st111:
		if p++; p == pe {
			goto _test_eof111
		}
	st_case_111:
		switch data[p] {
		case 34:
			goto st112
		case 92:
			goto st113
		}
		if data[p] <= 31 {
			goto tr98
		}
		goto st111
	st112:
		if p++; p == pe {
			goto _test_eof112
		}
	st_case_112:
		switch data[p] {
		case 13:
			goto st101
		case 32:
			goto st101
		case 44:
			goto st102
		case 125:
			goto tr101
		}
		if 9 <= data[p] && data[p] <= 10 {
			goto st101
		}
		goto tr98
	tr101:
		{
			top--
			cs = stack[top]
			goto _again
		}
		goto st195
	st195:
		if p++; p == pe {
			goto _test_eof195
		}
	st_case_195:
		goto st0
	st113:
		if p++; p == pe {
			goto _test_eof113
		}
	st_case_113:
		switch data[p] {
		case 34:
			goto st114
		case 47:
			goto st114
		case 92:
			goto st114
		case 98:
			goto st114
		case 102:
			goto st114
		case 110:
			goto st114
		case 114:
			goto st114
		case 116:
			goto st114
		case 117:
			goto st115
		}
		goto tr98
	st114:
		if p++; p == pe {
			goto _test_eof114
		}
	st_case_114:
		switch data[p] {
		case 34:
			goto st112
		case 92:
			goto st113
		}
		if data[p] <= 31 {
			goto tr98
		}
		goto st111
	st115:
		if p++; p == pe {
			goto _test_eof115
		}
	st_case_115:
		switch {
		case data[p] < 65:
			if 48 <= data[p] && data[p] <= 57 {
				goto st116
			}
		case data[p] > 70:
			if 97 <= data[p] && data[p] <= 102 {
				goto st116
			}
		default:
			goto st116
		}
		goto tr98
	st116:
		if p++; p == pe {
			goto _test_eof116
		}
	st_case_116:
		switch {
		case data[p] < 65:
			if 48 <= data[p] && data[p] <= 57 {
				goto st117
			}
		case data[p] > 70:
			if 97 <= data[p] && data[p] <= 102 {
				goto st117
			}
		default:
			goto st117
		}
		goto tr98
	st117:
		if p++; p == pe {
			goto _test_eof117
		}
	st_case_117:
		switch {
		case data[p] < 65:
			if 48 <= data[p] && data[p] <= 57 {
				goto st118
			}
		case data[p] > 70:
			if 97 <= data[p] && data[p] <= 102 {
				goto st118
			}
		default:
			goto st118
		}
		goto tr98
	st118:
		if p++; p == pe {
			goto _test_eof118
		}
	st_case_118:
		switch {
		case data[p] < 65:
			if 48 <= data[p] && data[p] <= 57 {
				goto st119
			}
		case data[p] > 70:
			if 97 <= data[p] && data[p] <= 102 {
				goto st119
			}
		default:
			goto st119
		}
		goto tr98
	st119:
		if p++; p == pe {
			goto _test_eof119
		}
	st_case_119:
		switch data[p] {
		case 34:
			goto st112
		case 92:
			goto st113
		}
		if data[p] <= 31 {
			goto tr98
		}
		goto st111
	st120:
		if p++; p == pe {
			goto _test_eof120
		}
	st_case_120:
		if data[p] == 48 {
			goto st121
		}
		if 49 <= data[p] && data[p] <= 57 {
			goto st124
		}
		goto tr98
	st121:
		if p++; p == pe {
			goto _test_eof121
		}
	st_case_121:
		switch data[p] {
		case 13:
			goto st101
		case 32:
			goto st101
		case 44:
			goto st102
		case 46:
			goto tr148
		case 69:
			goto tr149
		case 101:
			goto tr149
		case 125:
			goto tr101
		}
		if 9 <= data[p] && data[p] <= 10 {
			goto st101
		}
		goto tr98
	tr148:
		p, err = skipFloatDec(data, p+1, pe)
		goto st122
	st122:
		if p++; p == pe {
			goto _test_eof122
		}
	st_case_122:
		switch data[p] {
		case 13:
			goto st101
		case 32:
			goto st101
		case 44:
			goto st102
		case 125:
			goto tr101
		}
		if 9 <= data[p] && data[p] <= 10 {
			goto st101
		}
		goto tr98
	tr149:
		p, err = skipFloatExp(data, p+1, pe)
		goto st123
	st123:
		if p++; p == pe {
			goto _test_eof123
		}
	st_case_123:
		switch data[p] {
		case 13:
			goto st101
		case 32:
			goto st101
		case 44:
			goto st102
		case 125:
			goto tr101
		}
		if 9 <= data[p] && data[p] <= 10 {
			goto st101
		}
		goto tr98
	st124:
		if p++; p == pe {
			goto _test_eof124
		}
	st_case_124:
		switch data[p] {
		case 13:
			goto st101
		case 32:
			goto st101
		case 44:
			goto st102
		case 46:
			goto tr148
		case 69:
			goto tr149
		case 101:
			goto tr149
		case 125:
			goto tr101
		}
		switch {
		case data[p] > 10:
			if 48 <= data[p] && data[p] <= 57 {
				goto st125
			}
		case data[p] >= 9:
			goto st101
		}
		goto tr98
	st125:
		if p++; p == pe {
			goto _test_eof125
		}
	st_case_125:
		switch data[p] {
		case 13:
			goto st101
		case 32:
			goto st101
		case 44:
			goto st102
		case 46:
			goto tr148
		case 69:
			goto tr149
		case 101:
			goto tr149
		case 125:
			goto tr101
		}
		switch {
		case data[p] > 10:
			if 48 <= data[p] && data[p] <= 57 {
				goto st125
			}
		case data[p] >= 9:
			goto st101
		}
		goto tr98
	tr134:
		{
			if top == skipMaxDepth {
				err = errMaxDepth
				{
					p++
					cs = 0
					goto _out
				}
			}
			if top+1 >= len(stack) {
				stack = append(stack, make([]int, 1+top-len(stack))...)
			}
			{
				stack[top] = 126
				top++
				goto st23
			}
		}
		goto st126
	st126:
		if p++; p == pe {
			goto _test_eof126
		}
	st_case_126:
		switch data[p] {
		case 13:
			goto st101
		case 32:
			goto st101
		case 44:
			goto st102
		case 125:
			goto tr101
		}
		if 9 <= data[p] && data[p] <= 10 {
			goto st101
		}
		goto tr98
	st127:
		if p++; p == pe {
			goto _test_eof127
		}
	st_case_127:
		if data[p] == 97 {
			goto st128
		}
		goto tr98
	st128:
		if p++; p == pe {
			goto _test_eof128
		}
	st_case_128:
		if data[p] == 108 {
			goto st129
		}
		goto tr98
	st129:
		if p++; p == pe {
			goto _test_eof129
		}
	st_case_129:
		if data[p] == 115 {
			goto st130
		}
		goto tr98
	st130:
		if p++; p == pe {
			goto _test_eof130
		}
	st_case_130:
		if data[p] == 101 {
			goto st131
		}
		goto tr98
	st131:
		if p++; p == pe {
			goto _test_eof131
		}
	st_case_131:
		switch data[p] {
		case 13:
			goto st101
		case 32:
			goto st101
		case 44:
			goto st102
		case 125:
			goto tr101
		}
		if 9 <= data[p] && data[p] <= 10 {
			goto st101
		}
		goto tr98
	st132:
		if p++; p == pe {
			goto _test_eof132
		}
	st_case_132:
		if data[p] == 117 {
			goto st133
		}
		goto tr98
	st133:
		if p++; p == pe {
			goto _test_eof133
		}
	st_case_133:
		if data[p] == 108 {
			goto st134
		}
		goto tr98
	st134:
		if p++; p == pe {
			goto _test_eof134
		}
	st_case_134:
		if data[p] == 108 {
			goto st135
		}
		goto tr98
	st135:
		if p++; p == pe {
			goto _test_eof135
		}
	st_case_135:
		switch data[p] {
		case 13:
			goto st101
		case 32:
			goto st101
		case 44:
			goto st102
		case 125:
			goto tr101
		}
		if 9 <= data[p] && data[p] <= 10 {
			goto st101
		}
		goto tr98
	st136:
		if p++; p == pe {
			goto _test_eof136
		}
	st_case_136:
		if data[p] == 114 {
			goto st137
		}
		goto tr98
	st137:
		if p++; p == pe {
			goto _test_eof137
		}
	st_case_137:
		if data[p] == 117 {
			goto st138
		}
		goto tr98
	st138:
		if p++; p == pe {
			goto _test_eof138
		}
	st_case_138:
		if data[p] == 101 {
			goto st139
		}
		goto tr98
	st139:
		if p++; p == pe {
			goto _test_eof139
		}
	st_case_139:
		switch data[p] {
		case 13:
			goto st101
		case 32:
			goto st101
		case 44:
			goto st102
		case 125:
			goto tr101
		}
		if 9 <= data[p] && data[p] <= 10 {
			goto st101
		}
		goto tr98
	tr138:
		{
			if top == skipMaxDepth {
				err = errMaxDepth
				{
					p++
					cs = 0
					goto _out
				}
			}
			if top+1 >= len(stack) {
				stack = append(stack, make([]int, 1+top-len(stack))...)
			}
			{
				stack[top] = 140
				top++
				goto st90
			}
		}
		goto st140
	st140:
		if p++; p == pe {
			goto _test_eof140
		}
	st_case_140:
		switch data[p] {
		case 13:
			goto st101
		case 32:
			goto st101
		case 44:
			goto st102
		case 125:
			goto tr101
		}
		if 9 <= data[p] && data[p] <= 10 {
			goto st101
		}
		goto tr98
	st141:
		if p++; p == pe {
			goto _test_eof141
		}
	st_case_141:
		switch data[p] {
		case 34:
			goto st142
		case 47:
			goto st142
		case 92:
			goto st142
		case 98:
			goto st142
		case 102:
			goto st142
		case 110:
			goto st142
		case 114:
			goto st142
		case 116:
			goto st142
		case 117:
			goto st143
		}
		goto tr98
	st142:
		if p++; p == pe {
			goto _test_eof142
		}
	st_case_142:
		switch data[p] {
		case 34:
			goto st106
		case 92:
			goto st141
		}
		if data[p] <= 31 {
			goto tr98
		}
		goto st105
	st143:
		if p++; p == pe {
			goto _test_eof143
		}
	st_case_143:
		switch {
		case data[p] < 65:
			if 48 <= data[p] && data[p] <= 57 {
				goto st144
			}
		case data[p] > 70:
			if 97 <= data[p] && data[p] <= 102 {
				goto st144
			}
		default:
			goto st144
		}
		goto tr98
	st144:
		if p++; p == pe {
			goto _test_eof144
		}
	st_case_144:
		switch {
		case data[p] < 65:
			if 48 <= data[p] && data[p] <= 57 {
				goto st145
			}
		case data[p] > 70:
			if 97 <= data[p] && data[p] <= 102 {
				goto st145
			}
		default:
			goto st145
		}
		goto tr98
	st145:
		if p++; p == pe {
			goto _test_eof145
		}
	st_case_145:
		switch {
		case data[p] < 65:
			if 48 <= data[p] && data[p] <= 57 {
				goto st146
			}
		case data[p] > 70:
			if 97 <= data[p] && data[p] <= 102 {
				goto st146
			}
		default:
			goto st146
		}
		goto tr98
	st146:
		if p++; p == pe {
			goto _test_eof146
		}
	st_case_146:
		switch {
		case data[p] < 65:
			if 48 <= data[p] && data[p] <= 57 {
				goto st147
			}
		case data[p] > 70:
			if 97 <= data[p] && data[p] <= 102 {
				goto st147
			}
		default:
			goto st147
		}
		goto tr98
	st147:
		if p++; p == pe {
			goto _test_eof147
		}
	st_case_147:
		switch data[p] {
		case 34:
			goto st106
		case 92:
			goto st141
		}
		if data[p] <= 31 {
			goto tr98
		}
		goto st105
	st148:
		if p++; p == pe {
			goto _test_eof148
		}
	st_case_148:
		switch data[p] {
		case 34:
			goto st149
		case 47:
			goto st149
		case 92:
			goto st149
		case 98:
			goto st149
		case 102:
			goto st149
		case 110:
			goto st149
		case 114:
			goto st149
		case 116:
			goto st149
		case 117:
			goto st150
		}
		goto tr98
	st149:
		if p++; p == pe {
			goto _test_eof149
		}
	st_case_149:
		switch data[p] {
		case 34:
			goto st100
		case 92:
			goto st148
		}
		if data[p] <= 31 {
			goto tr98
		}
		goto st99
	st150:
		if p++; p == pe {
			goto _test_eof150
		}
	st_case_150:
		switch {
		case data[p] < 65:
			if 48 <= data[p] && data[p] <= 57 {
				goto st151
			}
		case data[p] > 70:
			if 97 <= data[p] && data[p] <= 102 {
				goto st151
			}
		default:
			goto st151
		}
		goto tr98
	st151:
		if p++; p == pe {
			goto _test_eof151
		}
	st_case_151:
		switch {
		case data[p] < 65:
			if 48 <= data[p] && data[p] <= 57 {
				goto st152
			}
		case data[p] > 70:
			if 97 <= data[p] && data[p] <= 102 {
				goto st152
			}
		default:
			goto st152
		}
		goto tr98
	st152:
		if p++; p == pe {
			goto _test_eof152
		}
	st_case_152:
		switch {
		case data[p] < 65:
			if 48 <= data[p] && data[p] <= 57 {
				goto st153
			}
		case data[p] > 70:
			if 97 <= data[p] && data[p] <= 102 {
				goto st153
			}
		default:
			goto st153
		}
		goto tr98
	st153:
		if p++; p == pe {
			goto _test_eof153
		}
	st_case_153:
		switch {
		case data[p] < 65:
			if 48 <= data[p] && data[p] <= 57 {
				goto st154
			}
		case data[p] > 70:
			if 97 <= data[p] && data[p] <= 102 {
				goto st154
			}
		default:
			goto st154
		}
		goto tr98
	st154:
		if p++; p == pe {
			goto _test_eof154
		}
	st_case_154:
		switch data[p] {
		case 34:
			goto st100
		case 92:
			goto st148
		}
		if data[p] <= 31 {
			goto tr98
		}
		goto st99
	st155:
		if p++; p == pe {
			goto _test_eof155
		}
	st_case_155:
		if data[p] == 48 {
			goto st156
		}
		if 49 <= data[p] && data[p] <= 57 {
			goto st159
		}
		goto tr98
	st156:
		if p++; p == pe {
			goto _test_eof156
		}
	st_case_156:
		switch data[p] {
		case 13:
			goto st101
		case 32:
			goto st101
		case 44:
			goto st102
		case 46:
			goto tr173
		case 69:
			goto tr174
		case 101:
			goto tr174
		case 125:
			goto tr101
		}
		if 9 <= data[p] && data[p] <= 10 {
			goto st101
		}
		goto tr98
	tr173:
		p, err = skipFloatDec(data, p+1, pe)
		goto st157
	st157:
		if p++; p == pe {
			goto _test_eof157
		}
	st_case_157:
		switch data[p] {
		case 13:
			goto st101
		case 32:
			goto st101
		case 44:
			goto st102
		case 125:
			goto tr101
		}
		if 9 <= data[p] && data[p] <= 10 {
			goto st101
		}
		goto tr98
	tr174:
		p, err = skipFloatExp(data, p+1, pe)
		goto st158
	st158:
		if p++; p == pe {
			goto _test_eof158
		}
	st_case_158:
		switch data[p] {
		case 13:
			goto st101
		case 32:
			goto st101
		case 44:
			goto st102
		case 125:
			goto tr101
		}
		if 9 <= data[p] && data[p] <= 10 {
			goto st101
		}
		goto tr98
	st159:
		if p++; p == pe {
			goto _test_eof159
		}
	st_case_159:
		switch data[p] {
		case 13:
			goto st101
		case 32:
			goto st101
		case 44:
			goto st102
		case 46:
			goto tr173
		case 69:
			goto tr174
		case 101:
			goto tr174
		case 125:
			goto tr101
		}
		switch {
		case data[p] > 10:
			if 48 <= data[p] && data[p] <= 57 {
				goto st160
			}
		case data[p] >= 9:
			goto st101
		}
		goto tr98
	st160:
		if p++; p == pe {
			goto _test_eof160
		}
	st_case_160:
		switch data[p] {
		case 13:
			goto st101
		case 32:
			goto st101
		case 44:
			goto st102
		case 46:
			goto tr173
		case 69:
			goto tr174
		case 101:
			goto tr174
		case 125:
			goto tr101
		}
		switch {
		case data[p] > 10:
			if 48 <= data[p] && data[p] <= 57 {
				goto st160
			}
		case data[p] >= 9:
			goto st101
		}
		goto tr98
	tr112:
		{
			if top == skipMaxDepth {
				err = errMaxDepth
				{
					p++
					cs = 0
					goto _out
				}
			}
			if top+1 >= len(stack) {
				stack = append(stack, make([]int, 1+top-len(stack))...)
			}
			{
				stack[top] = 161
				top++
				goto st23
			}
		}
		goto st161
	st161:
		if p++; p == pe {
			goto _test_eof161
		}
	st_case_161:
		switch data[p] {
		case 13:
			goto st101
		case 32:
			goto st101
		case 44:
			goto st102
		case 125:
			goto tr101
		}
		if 9 <= data[p] && data[p] <= 10 {
			goto st101
		}
		goto tr98
	st162:
		if p++; p == pe {
			goto _test_eof162
		}
	st_case_162:
		if data[p] == 97 {
			goto st163
		}
		goto tr98
	st163:
		if p++; p == pe {
			goto _test_eof163
		}
	st_case_163:
		if data[p] == 108 {
			goto st164
		}
		goto tr98
	st164:
		if p++; p == pe {
			goto _test_eof164
		}
	st_case_164:
		if data[p] == 115 {
			goto st165
		}
		goto tr98
	st165:
		if p++; p == pe {
			goto _test_eof165
		}
	st_case_165:
		if data[p] == 101 {
			goto st166
		}
		goto tr98
	st166:
		if p++; p == pe {
			goto _test_eof166
		}
	st_case_166:
		switch data[p] {
		case 13:
			goto st101
		case 32:
			goto st101
		case 44:
			goto st102
		case 125:
			goto tr101
		}
		if 9 <= data[p] && data[p] <= 10 {
			goto st101
		}
		goto tr98
	st167:
		if p++; p == pe {
			goto _test_eof167
		}
	st_case_167:
		if data[p] == 117 {
			goto st168
		}
		goto tr98
	st168:
		if p++; p == pe {
			goto _test_eof168
		}
	st_case_168:
		if data[p] == 108 {
			goto st169
		}
		goto tr98
	st169:
		if p++; p == pe {
			goto _test_eof169
		}
	st_case_169:
		if data[p] == 108 {
			goto st170
		}
		goto tr98
	st170:
		if p++; p == pe {
			goto _test_eof170
		}
	st_case_170:
		switch data[p] {
		case 13:
			goto st101
		case 32:
			goto st101
		case 44:
			goto st102
		case 125:
			goto tr101
		}
		if 9 <= data[p] && data[p] <= 10 {
			goto st101
		}
		goto tr98
	st171:
		if p++; p == pe {
			goto _test_eof171
		}
	st_case_171:
		if data[p] == 114 {
			goto st172
		}
		goto tr98
	st172:
		if p++; p == pe {
			goto _test_eof172
		}
	st_case_172:
		if data[p] == 117 {
			goto st173
		}
		goto tr98
	st173:
		if p++; p == pe {
			goto _test_eof173
		}
	st_case_173:
		if data[p] == 101 {
			goto st174
		}
		goto tr98
	st174:
		if p++; p == pe {
			goto _test_eof174
		}
	st_case_174:
		switch data[p] {
		case 13:
			goto st101
		case 32:
			goto st101
		case 44:
			goto st102
		case 125:
			goto tr101
		}
		if 9 <= data[p] && data[p] <= 10 {
			goto st101
		}
		goto tr98
	tr116:
		{
			if top == skipMaxDepth {
				err = errMaxDepth
				{
					p++
					cs = 0
					goto _out
				}
			}
			if top+1 >= len(stack) {
				stack = append(stack, make([]int, 1+top-len(stack))...)
			}
			{
				stack[top] = 175
				top++
				goto st90
			}
		}
		goto st175
	st175:
		if p++; p == pe {
			goto _test_eof175
		}
	st_case_175:
		switch data[p] {
		case 13:
			goto st101
		case 32:
			goto st101
		case 44:
			goto st102
		case 125:
			goto tr101
		}
		if 9 <= data[p] && data[p] <= 10 {
			goto st101
		}
		goto tr98
	st176:
		if p++; p == pe {
			goto _test_eof176
		}
	st_case_176:
		switch data[p] {
		case 34:
			goto st177
		case 47:
			goto st177
		case 92:
			goto st177
		case 98:
			goto st177
		case 102:
			goto st177
		case 110:
			goto st177
		case 114:
			goto st177
		case 116:
			goto st177
		case 117:
			goto st178
		}
		goto tr98
	st177:
		if p++; p == pe {
			goto _test_eof177
		}
	st_case_177:
		switch data[p] {
		case 34:
			goto st94
		case 92:
			goto st176
		}
		if data[p] <= 31 {
			goto tr98
		}
		goto st93
	st178:
		if p++; p == pe {
			goto _test_eof178
		}
	st_case_178:
		switch {
		case data[p] < 65:
			if 48 <= data[p] && data[p] <= 57 {
				goto st179
			}
		case data[p] > 70:
			if 97 <= data[p] && data[p] <= 102 {
				goto st179
			}
		default:
			goto st179
		}
		goto tr98
	st179:
		if p++; p == pe {
			goto _test_eof179
		}
	st_case_179:
		switch {
		case data[p] < 65:
			if 48 <= data[p] && data[p] <= 57 {
				goto st180
			}
		case data[p] > 70:
			if 97 <= data[p] && data[p] <= 102 {
				goto st180
			}
		default:
			goto st180
		}
		goto tr98
	st180:
		if p++; p == pe {
			goto _test_eof180
		}
	st_case_180:
		switch {
		case data[p] < 65:
			if 48 <= data[p] && data[p] <= 57 {
				goto st181
			}
		case data[p] > 70:
			if 97 <= data[p] && data[p] <= 102 {
				goto st181
			}
		default:
			goto st181
		}
		goto tr98
	st181:
		if p++; p == pe {
			goto _test_eof181
		}
	st_case_181:
		switch {
		case data[p] < 65:
			if 48 <= data[p] && data[p] <= 57 {
				goto st182
			}
		case data[p] > 70:
			if 97 <= data[p] && data[p] <= 102 {
				goto st182
			}
		default:
			goto st182
		}
		goto tr98
	st182:
		if p++; p == pe {
			goto _test_eof182
		}
	st_case_182:
		switch data[p] {
		case 34:
			goto st94
		case 92:
			goto st176
		}
		if data[p] <= 31 {
			goto tr98
		}
		goto st93
	st_out:
	_test_eof1:
		cs = 1
		goto _test_eof
	_test_eof2:
		cs = 2
		goto _test_eof
	_test_eof3:
		cs = 3
		goto _test_eof
	_test_eof4:
		cs = 4
		goto _test_eof
	_test_eof183:
		cs = 183
		goto _test_eof
	_test_eof5:
		cs = 5
		goto _test_eof
	_test_eof6:
		cs = 6
		goto _test_eof
	_test_eof7:
		cs = 7
		goto _test_eof
	_test_eof8:
		cs = 8
		goto _test_eof
	_test_eof9:
		cs = 9
		goto _test_eof
	_test_eof10:
		cs = 10
		goto _test_eof
	_test_eof11:
		cs = 11
		goto _test_eof
	_test_eof12:
		cs = 12
		goto _test_eof
	_test_eof184:
		cs = 184
		goto _test_eof
	_test_eof185:
		cs = 185
		goto _test_eof
	_test_eof186:
		cs = 186
		goto _test_eof
	_test_eof187:
		cs = 187
		goto _test_eof
	_test_eof188:
		cs = 188
		goto _test_eof
	_test_eof189:
		cs = 189
		goto _test_eof
	_test_eof13:
		cs = 13
		goto _test_eof
	_test_eof14:
		cs = 14
		goto _test_eof
	_test_eof15:
		cs = 15
		goto _test_eof
	_test_eof16:
		cs = 16
		goto _test_eof
	_test_eof190:
		cs = 190
		goto _test_eof
	_test_eof17:
		cs = 17
		goto _test_eof
	_test_eof18:
		cs = 18
		goto _test_eof
	_test_eof19:
		cs = 19
		goto _test_eof
	_test_eof191:
		cs = 191
		goto _test_eof
	_test_eof20:
		cs = 20
		goto _test_eof
	_test_eof21:
		cs = 21
		goto _test_eof
	_test_eof22:
		cs = 22
		goto _test_eof
	_test_eof192:
		cs = 192
		goto _test_eof
	_test_eof193:
		cs = 193
		goto _test_eof
	_test_eof23:
		cs = 23
		goto _test_eof
	_test_eof24:
		cs = 24
		goto _test_eof
	_test_eof25:
		cs = 25
		goto _test_eof
	_test_eof26:
		cs = 26
		goto _test_eof
	_test_eof27:
		cs = 27
		goto _test_eof
	_test_eof28:
		cs = 28
		goto _test_eof
	_test_eof29:
		cs = 29
		goto _test_eof
	_test_eof30:
		cs = 30
		goto _test_eof
	_test_eof31:
		cs = 31
		goto _test_eof
	_test_eof32:
		cs = 32
		goto _test_eof
	_test_eof33:
		cs = 33
		goto _test_eof
	_test_eof194:
		cs = 194
		goto _test_eof
	_test_eof34:
		cs = 34
		goto _test_eof
	_test_eof35:
		cs = 35
		goto _test_eof
	_test_eof36:
		cs = 36
		goto _test_eof
	_test_eof37:
		cs = 37
		goto _test_eof
	_test_eof38:
		cs = 38
		goto _test_eof
	_test_eof39:
		cs = 39
		goto _test_eof
	_test_eof40:
		cs = 40
		goto _test_eof
	_test_eof41:
		cs = 41
		goto _test_eof
	_test_eof42:
		cs = 42
		goto _test_eof
	_test_eof43:
		cs = 43
		goto _test_eof
	_test_eof44:
		cs = 44
		goto _test_eof
	_test_eof45:
		cs = 45
		goto _test_eof
	_test_eof46:
		cs = 46
		goto _test_eof
	_test_eof47:
		cs = 47
		goto _test_eof
	_test_eof48:
		cs = 48
		goto _test_eof
	_test_eof49:
		cs = 49
		goto _test_eof
	_test_eof50:
		cs = 50
		goto _test_eof
	_test_eof51:
		cs = 51
		goto _test_eof
	_test_eof52:
		cs = 52
		goto _test_eof
	_test_eof53:
		cs = 53
		goto _test_eof
	_test_eof54:
		cs = 54
		goto _test_eof
	_test_eof55:
		cs = 55
		goto _test_eof
	_test_eof56:
		cs = 56
		goto _test_eof
	_test_eof57:
		cs = 57
		goto _test_eof
	_test_eof58:
		cs = 58
		goto _test_eof
	_test_eof59:
		cs = 59
		goto _test_eof
	_test_eof60:
		cs = 60
		goto _test_eof
	_test_eof61:
		cs = 61
		goto _test_eof
	_test_eof62:
		cs = 62
		goto _test_eof
	_test_eof63:
		cs = 63
		goto _test_eof
	_test_eof64:
		cs = 64
		goto _test_eof
	_test_eof65:
		cs = 65
		goto _test_eof
	_test_eof66:
		cs = 66
		goto _test_eof
	_test_eof67:
		cs = 67
		goto _test_eof
	_test_eof68:
		cs = 68
		goto _test_eof
	_test_eof69:
		cs = 69
		goto _test_eof
	_test_eof70:
		cs = 70
		goto _test_eof
	_test_eof71:
		cs = 71
		goto _test_eof
	_test_eof72:
		cs = 72
		goto _test_eof
	_test_eof73:
		cs = 73
		goto _test_eof
	_test_eof74:
		cs = 74
		goto _test_eof
	_test_eof75:
		cs = 75
		goto _test_eof
	_test_eof76:
		cs = 76
		goto _test_eof
	_test_eof77:
		cs = 77
		goto _test_eof
	_test_eof78:
		cs = 78
		goto _test_eof
	_test_eof79:
		cs = 79
		goto _test_eof
	_test_eof80:
		cs = 80
		goto _test_eof
	_test_eof81:
		cs = 81
		goto _test_eof
	_test_eof82:
		cs = 82
		goto _test_eof
	_test_eof83:
		cs = 83
		goto _test_eof
	_test_eof84:
		cs = 84
		goto _test_eof
	_test_eof85:
		cs = 85
		goto _test_eof
	_test_eof86:
		cs = 86
		goto _test_eof
	_test_eof87:
		cs = 87
		goto _test_eof
	_test_eof88:
		cs = 88
		goto _test_eof
	_test_eof89:
		cs = 89
		goto _test_eof
	_test_eof90:
		cs = 90
		goto _test_eof
	_test_eof91:
		cs = 91
		goto _test_eof
	_test_eof92:
		cs = 92
		goto _test_eof
	_test_eof93:
		cs = 93
		goto _test_eof
	_test_eof94:
		cs = 94
		goto _test_eof
	_test_eof95:
		cs = 95
		goto _test_eof
	_test_eof96:
		cs = 96
		goto _test_eof
	_test_eof97:
		cs = 97
		goto _test_eof
	_test_eof98:
		cs = 98
		goto _test_eof
	_test_eof99:
		cs = 99
		goto _test_eof
	_test_eof100:
		cs = 100
		goto _test_eof
	_test_eof101:
		cs = 101
		goto _test_eof
	_test_eof102:
		cs = 102
		goto _test_eof
	_test_eof103:
		cs = 103
		goto _test_eof
	_test_eof104:
		cs = 104
		goto _test_eof
	_test_eof105:
		cs = 105
		goto _test_eof
	_test_eof106:
		cs = 106
		goto _test_eof
	_test_eof107:
		cs = 107
		goto _test_eof
	_test_eof108:
		cs = 108
		goto _test_eof
	_test_eof109:
		cs = 109
		goto _test_eof
	_test_eof110:
		cs = 110
		goto _test_eof
	_test_eof111:
		cs = 111
		goto _test_eof
	_test_eof112:
		cs = 112
		goto _test_eof
	_test_eof195:
		cs = 195
		goto _test_eof
	_test_eof113:
		cs = 113
		goto _test_eof
	_test_eof114:
		cs = 114
		goto _test_eof
	_test_eof115:
		cs = 115
		goto _test_eof
	_test_eof116:
		cs = 116
		goto _test_eof
	_test_eof117:
		cs = 117
		goto _test_eof
	_test_eof118:
		cs = 118
		goto _test_eof
	_test_eof119:
		cs = 119
		goto _test_eof
	_test_eof120:
		cs = 120
		goto _test_eof
	_test_eof121:
		cs = 121
		goto _test_eof
	_test_eof122:
		cs = 122
		goto _test_eof
	_test_eof123:
		cs = 123
		goto _test_eof
	_test_eof124:
		cs = 124
		goto _test_eof
	_test_eof125:
		cs = 125
		goto _test_eof
	_test_eof126:
		cs = 126
		goto _test_eof
	_test_eof127:
		cs = 127
		goto _test_eof
	_test_eof128:
		cs = 128
		goto _test_eof
	_test_eof129:
		cs = 129
		goto _test_eof
	_test_eof130:
		cs = 130
		goto _test_eof
	_test_eof131:
		cs = 131
		goto _test_eof
	_test_eof132:
		cs = 132
		goto _test_eof
	_test_eof133:
		cs = 133
		goto _test_eof
	_test_eof134:
		cs = 134
		goto _test_eof
	_test_eof135:
		cs = 135
		goto _test_eof
	_test_eof136:
		cs = 136
		goto _test_eof
	_test_eof137:
		cs = 137
		goto _test_eof
	_test_eof138:
		cs = 138
		goto _test_eof
	_test_eof139:
		cs = 139
		goto _test_eof
	_test_eof140:
		cs = 140
		goto _test_eof
	_test_eof141:
		cs = 141
		goto _test_eof
	_test_eof142:
		cs = 142
		goto _test_eof
	_test_eof143:
		cs = 143
		goto _test_eof
	_test_eof144:
		cs = 144
		goto _test_eof
	_test_eof145:
		cs = 145
		goto _test_eof
	_test_eof146:
		cs = 146
		goto _test_eof
	_test_eof147:
		cs = 147
		goto _test_eof
	_test_eof148:
		cs = 148
		goto _test_eof
	_test_eof149:
		cs = 149
		goto _test_eof
	_test_eof150:
		cs = 150
		goto _test_eof
	_test_eof151:
		cs = 151
		goto _test_eof
	_test_eof152:
		cs = 152
		goto _test_eof
	_test_eof153:
		cs = 153
		goto _test_eof
	_test_eof154:
		cs = 154
		goto _test_eof
	_test_eof155:
		cs = 155
		goto _test_eof
	_test_eof156:
		cs = 156
		goto _test_eof
	_test_eof157:
		cs = 157
		goto _test_eof
	_test_eof158:
		cs = 158
		goto _test_eof
	_test_eof159:
		cs = 159
		goto _test_eof
	_test_eof160:
		cs = 160
		goto _test_eof
	_test_eof161:
		cs = 161
		goto _test_eof
	_test_eof162:
		cs = 162
		goto _test_eof
	_test_eof163:
		cs = 163
		goto _test_eof
	_test_eof164:
		cs = 164
		goto _test_eof
	_test_eof165:
		cs = 165
		goto _test_eof
	_test_eof166:
		cs = 166
		goto _test_eof
	_test_eof167:
		cs = 167
		goto _test_eof
	_test_eof168:
		cs = 168
		goto _test_eof
	_test_eof169:
		cs = 169
		goto _test_eof
	_test_eof170:
		cs = 170
		goto _test_eof
	_test_eof171:
		cs = 171
		goto _test_eof
	_test_eof172:
		cs = 172
		goto _test_eof
	_test_eof173:
		cs = 173
		goto _test_eof
	_test_eof174:
		cs = 174
		goto _test_eof
	_test_eof175:
		cs = 175
		goto _test_eof
	_test_eof176:
		cs = 176
		goto _test_eof
	_test_eof177:
		cs = 177
		goto _test_eof
	_test_eof178:
		cs = 178
		goto _test_eof
	_test_eof179:
		cs = 179
		goto _test_eof
	_test_eof180:
		cs = 180
		goto _test_eof
	_test_eof181:
		cs = 181
		goto _test_eof
	_test_eof182:
		cs = 182
		goto _test_eof

	_test_eof:
		{
		}
		if p == eof {
			switch cs {
			case 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22:

				return p, stack, errNoValidToken

			case 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89:
				err = errUnexpectedEOF
				{
					p++
					cs = 0
					goto _out
				}
				err = errInvalidArray
				{
					p++
					cs = 0
					goto _out
				}
			case 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182:
				err = errUnexpectedEOF
				{
					p++
					cs = 0
					goto _out
				}
				err = errInvalidObject
				{
					p++
					cs = 0
					goto _out
				}
			}
		}

	_out:
		{
		}
	}

	return p, stack, err
}

func skipStringFast(data []byte) (int, error) {
	cs, p := 0, 0
	pe := len(data)
	eof := len(data)
	var err error

	const skipStringFast_start int = 1
	const skipStringFast_first_final int = 6
	const skipStringFast_error int = 0

	const skipStringFast_en_main int = 1

	{
		cs = skipStringFast_start
	}

	{
		if p == pe {
			goto _test_eof
		}
		switch cs {
		case 1:
			goto st_case_1
		case 0:
			goto st_case_0
		case 2:
			goto st_case_2
		case 3:
			goto st_case_3
		case 6:
			goto st_case_6
		case 4:
			goto st_case_4
		case 5:
			goto st_case_5
		}
		goto st_out
	st_case_1:
		if data[p] == 34 {
			goto st2
		}
		goto tr0
	tr0:
		err = errInvalidString
		goto st0
	st_case_0:
	st0:
		cs = 0
		goto _out
	st2:
		if p++; p == pe {
			goto _test_eof2
		}
	st_case_2:
		switch data[p] {
		case 34:
			goto st6
		case 92:
			goto st4
		}
		goto st3
	st3:
		if p++; p == pe {
			goto _test_eof3
		}
	st_case_3:
		switch data[p] {
		case 34:
			goto st6
		case 92:
			goto st4
		}
		goto st3
	st6:
		if p++; p == pe {
			goto _test_eof6
		}
	st_case_6:
		goto st0
	st4:
		if p++; p == pe {
			goto _test_eof4
		}
	st_case_4:
		goto st5
	st5:
		if p++; p == pe {
			goto _test_eof5
		}
	st_case_5:
		switch data[p] {
		case 34:
			goto st6
		case 92:
			goto st4
		}
		goto st3
	st_out:
	_test_eof2:
		cs = 2
		goto _test_eof
	_test_eof3:
		cs = 3
		goto _test_eof
	_test_eof6:
		cs = 6
		goto _test_eof
	_test_eof4:
		cs = 4
		goto _test_eof
	_test_eof5:
		cs = 5
		goto _test_eof

	_test_eof:
		{
		}
		if p == eof {
			switch cs {
			case 1, 2, 3, 4, 5:
				err = errInvalidString
			}
		}

	_out:
		{
		}
	}

	return p, err
}
